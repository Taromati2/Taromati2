///////////////////////////////////////////
////////// 农历生肖干支星座节日查询辞书
////////// written by forjane 2009.09.03
///////////////////////////////////////////


LunarInit
{
	lunarinfo = (0x04bd8,0x04ae0,0x0a570,0x054d5,0x0d260,0x0d950,0x16554,0x056a0,0x09ad0,0x055d2,/
				0x04ae0,0x0a5b6,0x0a4d0,0x0d250,0x1d255,0x0b540,0x0d6a0,0x0ada2,0x095b0,0x14977,/
				0x04970,0x0a4b0,0x0b4b5,0x06a50,0x06d40,0x1ab54,0x02b60,0x09570,0x052f2,0x04970,/
				0x06566,0x0d4a0,0x0ea50,0x06e95,0x05ad0,0x02b60,0x186e3,0x092e0,0x1c8d7,0x0c950,/
				0x0d4a0,0x1d8a6,0x0b550,0x056a0,0x1a5b4,0x025d0,0x092d0,0x0d2b2,0x0a950,0x0b557,/
				0x06ca0,0x0b550,0x15355,0x04da0,0x0a5d0,0x14573,0x052d0,0x0a9a8,0x0e950,0x06aa0,/
				0x0aea6,0x0ab50,0x04b60,0x0aae4,0x0a570,0x05260,0x0f263,0x0d950,0x05b57,0x056a0,/
				0x096d0,0x04dd5,0x04ad0,0x0a4d0,0x0d4d4,0x0d250,0x0d558,0x0b540,0x0b5a0,0x195a6,/
				0x095b0,0x049b0,0x0a974,0x0a4b0,0x0b27a,0x06a50,0x06d40,0x0af46,0x0ab60,0x09570,/
				0x04af5,0x04970,0x064b0,0x074a3,0x0ea50,0x06b58,0x055c0,0x0ab60,0x096d5,0x092e0,/
				0x0c960,0x0d954,0x0d4a0,0x0da50,0x07552,0x056a0,0x0abb7,0x025d0,0x092d0,0x0cab5,/
				0x0a950,0x0b4a0,0x0baa4,0x0ad50,0x055d9,0x04ba0,0x0a5b0,0x15176,0x052b0,0x0a930,/
				0x07954,0x06aa0,0x0ad50,0x05b52,0x04b60,0x0a6e6,0x0a4e0,0x0d260,0x0ea65,0x0d530,/
				0x05aa0,0x076a3,0x096d0,0x04bd7,0x04ad0,0x0a4d0,0x1d0b6,0x0d250,0x0d520,0x0dd45,/
				0x0b5a0,0x056d0,0x055b2,0x049b0,0x0a577,0x0a4b0,0x0aa50,0x1b255,0x06d20,0x0ada0);
}


// 计算农历某年的天数
//----------------------------------------------
LYearDays
{
	_sum = 348;
	_year = _argv[0];
	_bitmap = lunarinfo[_year - 1900];
	_leap = _bitmap % 16;
	_bitmap /= 16;
	for _i = 0; _i < 12; _i ++ {
		_sum += _bitmap % 2;
		_bitmap /= 2;
	}
	if _leap > 0 {
		_sum += 29 + _bitmap % 2;
	}
	_sum;
}


// 计算农历某年闰月是几月
//----------------------------------------------
LeapMonth
{
	_year = _argv[0];
	_sum = lunarinfo[_year - 1900] % 16;
	_sum;
}


// 计算农历y年所有月的总天数，返回泛用阵列
//----------------------------------------------
LMonthDays
{
	_year = _argv[0];
	_sum = IARRAY;
	_bitmap = lunarinfo[_year - 1900];
	_leap = _bitmap % 16;
	_bitmap /= 16;
	for _i = 12; _i >= 0; _i -- {
		_sum[_i] = 29 + _bitmap % 2;
		_bitmap /= 2;
	}
	if _leap == 0 {
		_sum[0] = 0;
	}
	_sum;
}





GetLunar
{
	LunarInit;
	_syear = TOINT(_argv[0]);
	_smonth = TOINT(_argv[1]);
	_sday = TOINT(_argv[2]);
	_sdaysofmonth = (0,31,28,31,30,31,30,31,31,30,31,30,31);
	_lyeartable = ("鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪");
	_lmonthtable = ("","闰","正","二","三","四","五","六","七","八","九","十","十一","腊");
	_ldaytable = ("","初一","初二","初三","初四","初五","初六","初七","初八","初九","初十",/
					"十一","十二","十三","十四","十五","十六","十七","十八","十九","二十",/
					"廿一","廿二","廿三","廿四","廿五","廿六","廿七","廿八","廿九","三十");
	_gan = ("甲","乙","丙","丁","戊","己","庚","辛","壬","癸");
	_zhi = ("子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥");
	_sftv = ("1,1,元旦","2,14,情人节","3,8,妇女节","3,12,植树节","3,14,白色情人节",/
			"3,15,消费者日","4,1,愚人节","5,1,劳动节","5,4,青年节","6,1,儿童节",/
			"7,1,香港回归","8,1,建军节","8,8,父亲节","9,10,教师节","10,1,国庆节",/
			"10,31,万圣节","12,20,澳门回归","12,25,圣诞节");
	_lftv = ("1,1,春节","1,15,元宵节","5,5,端午节","7,7,七夕","7,15,中元节",/
			"8,15,中秋节","9,9,重阳节","12,8,腊八节","12,24,小年")

	_iweekday = 0;
	_weekday = "";
	_offset = 0;

	_ilyear = 0;
	_ilmonth = 0;
	_ilday = 0;
	_igzyear = 0;
	_igzmonth = 0;
	_igzday = 0;

	_lyear = "";
	_lmonth = "";
	_lday = "";
	_gzyear = "";
	_gzmonth = "";
	_gzday = "";
	_ftv = "";
	_outform = IARRAY;


// 计算距1900年1月1日天数
//----------------------------------------------
	for _i = 1900; _i < _syear; _i++ {
		if _i % 4 == 0 && _i % 100 != 0 || _i % 400 == 0 {
			_offset += 366;
		}
		else {
			_offset += 365;
		}
	}
	for _i = 1; _i < _smonth; _i++ {
		if _i == 2 && (_syear % 4 == 0 && _syear % 100 != 0 || _syear % 400 == 0) {
			_offset += 29;
		}
		else {
			_offset += _sdaysofmonth[_i];
		}
	}
	_offset += _sday ;


// 计算星期几
//----------------------------------------------
	_iweekday = _offset % 7;
	_weekday = ('日','一','二','三','四','五','六')[_iweekday];

// 计算农历年月日天干地支
//----------------------------------------------
	_offset -= 30;
	_igzday = _offset + 39;
	_count = 0;
	for _ilyear = 1900; _count < _offset; _ilyear ++ {
		_count += LYearDays(_ilyear);
	}
	_count -= LYearDays(_ilyear - 1);	
	_ilyear --;
	_igzyear = _ilyear - 1864;
	_igzmonth = (_ilyear - 1899) * 12 + 1;

	_leap = LeapMonth(_ilyear);
	_lmdays = LMonthDays(_ilyear);
	_tmplmdays = _lmdays[_leap];	
	_lmdays[_leap] += _lmdays[0];

	for _ilmonth = 1; _count < _offset; _ilmonth ++ {
		_count += _lmdays[_ilmonth];
	}
	_count -= _lmdays[_ilmonth - 1];
	_ilmonth --;
	_ilday = _offset - _count;
	_igzmonth += _ilmonth;

	if _ilmonth == _leap && _ilday > _tmplmdays {
		_ilday -= _tmplmdays;
		_ilmonth += 16;
	}


//格式化输出
//------------------------------------------------
	_lyear = _lyeartable[(_ilyear - 1900) % 12];
	_lmonth = _lmonthtable[_ilmonth / 16] + _lmonthtable[_ilmonth % 16 + 1];
	_lday = _ldaytable[_ilday];

	_gzyear = _gan[_igzyear % 10] + _zhi[_igzyear % 12];
	_gzmonth = _gan[_igzmonth % 10] + _zhi[_igzmonth % 12];
	_gzday = _gan[_igzday % 10] + _zhi[_igzday % 12];


//判断节日
//------------------------------------------------
	foreach _sftv; _i {
		if _i[0] == _smonth && _i[1] == _sday {
			_ftv = _i[2];
		}
	}
	if _smonth == 5 && _iweekday == 0 && _sday > 7 && _sday < 15 {
			_ftv = "母亲节";
	}
	if _smonth == 11 && _iweekday == 4 && _sday > 21 && _sday < 29 {
			_ftv = "感恩节";	
	}
	foreach _lftv; _i {
		if _i[0] == _ilmonth && _i[1] == _ilday {
			if _ftv !="" {
				_ftv += "," +_i[2];
			}
			else {
				_ftv = _i[2];
			}
		}
	}
	if _ilmonth == 12 && _ilday == _lmdays[12] {
		if _ftv !="" {
			_ftv += ",除夕";
		}
		else {
			_ftv = "除夕";
		}
	}
	ERASEVAR("lunarinfo");
//	(阳历年，月，日，星期，农历年，月，日，年干支，月干支，日干支，节日，农历年数字形式，月数字形式，日数字形式)
//--------------------------------------------------------------------------------------------------------------
	_outform = (_syear,_smonth,_sday,_weekday, _lyear, _lmonth, _lday, _gzyear, _gzmonth, _gzday, _ftv, _ilyear, _ilmonth, _ilday);
	_outform;

}

//计算当前日期的农历
//-----------------------------------------------------------------------------
Lunar
{
	if lunardata[0] != year || lunardata[1] != month || lunardata[2] != day {
		lunardata = GetLunar(year,month,day);
	}
}


GetStar
{
	_month = _argv[0];
	_day = _argv[1];
	_days = (19,18,20,19,20,21,22,22,22,22,21,21);
	_stars = ("摩羯座","水瓶座","双鱼座","白羊座","金牛座","双子座","巨蟹座","狮子座","处女座","天秤座","天蝎座","射手座");
	_tmp = _days[_month - 1];
	if _day <= _tmp {
		_stars[_month - 1];
	}
	else {
		_stars[_month % 12];
	}
}


TimeName
{
	_time = hour;
	if _argv[0] != "" {
		_time = _argv[0];
	}
	if _time > 0 && _time < 5 {
		"凌晨";
	}
	elseif _time < 8 {
		"早晨";
	}
	elseif _time < 11 {
		"上午";
	}
	elseif _time < 14 {
		"中午";
	}
	elseif _time < 19 {
		"下午";
	}
	elseif _time < 23 {
		"晚上";
	}
	elseif _time <25 || _time == 0 {
		"夜里";
	}
}	
