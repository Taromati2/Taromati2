///////////////////////////////////////////
////////// 无限制歌词卡and迷你播放器辞书
////////// written by forjane 2009.11.29
///////////////////////////////////////////

OnPlayWithLyric
{
	PlayWithLyric(reference0,reference1,reference2);
}

ReadLrc
{
	_file = _argv[0];
	lrc = IARRAY;
	lrctime = IARRAY;
	lrcset = "";
	_t = IARRAY;
	_s = "";
	_offset = 0;
	_txt = "error";

	if FOPEN(_file,'r') {
		_charset = TOLOWER(FREAD(_file));
		FCLOSE(_file);
		if 'charset:' _in_ _charset {
			_charset = _charset[1,'charset:'];
			_charset = _charset[0,']'];
		}
		if _charset == 'utf-8' || _charset == 'utf8' {
			FCHARSET(1);
		}
		elseif _argc > 1 {
			FCHARSET(_argv[1]);
		}
		else {
			FCHARSET(127);
		}
	}

	if FOPEN(_file,'r') {
		_txt = "ok";
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
			_cnt = 0;
			_sing = 0;
			for _tmp = _buff[_cnt,']']; '[' _in_ _tmp; _tmp = _buff[_cnt,']'] {
				_tmp = _tmp[1,'['];
				if 'ti:' _in_ _tmp {
					lrcset += '\f[bold,1]标题：\f[bold,default]' + _tmp[1,':'] + '\n';
				}
				elseif 'ar:' _in_ _tmp {
					lrcset += '\f[bold,1]歌手：\f[bold,default]' + _tmp[1,':'] + '\n';
				}
				elseif 'al:' _in_ _tmp {
					lrcset += '\f[bold,1]专辑：\f[bold,default]' + _tmp[1,':'] + '\n';
				}
				elseif 'offset:' _in_ _tmp {
					_offset = TOINT(_tmp[1,':']);
				}
				elseif ISINTSTR(_tmp[0,':']) {
					_t[_cnt] = TOINT(_tmp[0,':']) * 60000 + TOINT(TOREAL(_tmp[1,':']) * 1000) + _offset;
					_sing = 1;
				}
				_cnt ++;
			}
			_s = CUTSPACE(_buff[_cnt,']']);
			if _sing {
				foreach _t; _time {
					_added = 0;
					for _i = 0; lrctime[_i] != "";  _i ++ {
						if _time < lrctime[_i] {
							lrctime[_i] = (_time,lrctime[_i]);
							lrc[_i] = (_s,lrc[_i]);
							_added = 1;
							break;
						}
					}
					if _added == 0 {
						lrctime,= _time;
						lrc,= _s;
					}
				}
				_sing = 0;
				_t = IARRAY;
			}
		}
	}

	FCLOSE(_file);
	FCHARSET(1);
	_txt;
}


ReadTxt
{
	_file = _argv[0];
	_txt = "error";

	if FOPEN(_file,'r') {
		_charset=GetTxtCharset(_file);
		if 'Unicode' _in_ _charset
		{
			FCLOSE(_file);
			lrctime="暂不支持Unicode编码的TXT文件，请将TXT另存为UTF-8编码格式"
			return;
		}
		_id=CharsetToId(_charset);
		FCHARSET(_id);
	}
	if FOPEN(_file,'r') {
		lrctime = IARRAY;
		lrctime[0]="txt";
		lrctime[1]=""
		_txt = "ok";
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
		lrctime[1]+=_buff+'\n\![set,choicetimeout,0]'
		}
	}

	FCLOSE(_file);
	FCHARSET(1);
	_txt;
}




ShowLrc
{
	_txt = "\0\c\b[2]\![set,autoscroll,enable]\![quicksession,true]";
	_time = 0;
	if _argc > 0 {
		_time = _argv[0];
	}
	if lrctime[0]=="txt" {
		_txt+="\![set,autoscroll,false]"+lrctime[1]
		_txt;
		return;
	}
	_k=ARRAYSIZE(lrc)
	for _i=0;_i<_k+15;_i++ {
		if lrc[_i] == '' {
			lrc[_i] = ' ';
		}
	}

	_txt += '\n \n \n \n \n \n \n \n \n \n \n \n \n'+lrcset + " \n \n";
	_txt+=_tmp;
	for _i = 0; lrctime[_i] != ''; _i ++ {
		_tmp = '\__w[' + (lrctime[_i] - _time) + ']'
		if _time >= lrctime[_i] {
			_tmp += "\c[line,15]" + lrc[_i - 1] + "\n\f[color,238,50,95]" + lrc[_i] + "\f[color,default]\n";
			_tmp += lrc[_i+1] + '\n';
			_tmp += lrc[_i+2] + '\n';
			_tmp += lrc[_i+3] + '\n';
			_tmp += lrc[_i+4] + '\n';
			_tmp += lrc[_i+5] + '\n';
			_tmp += lrc[_i+6] + '\n';
			_tmp += lrc[_i+7] + '\n';
			_tmp += lrc[_i+8] + '\n';
			_tmp += lrc[_i+9] + '\n';
			_tmp += lrc[_i+10] + '\n';
			_tmp += lrc[_i+11] + '\n';
			_tmp += lrc[_i+12] + '\n';
			_tmp += lrc[_i+13] + '\n';
			_tmp += lrc[_i+14] + '\n';
		}
		elseif _i == 0 {
			_tmp += "\f[color,238,50,95]" + lrc[_i] + "\f[color,default]\n";
			_tmp += lrc[_i+1] + '\n';
			_tmp += lrc[_i+2] + '\n';
			_tmp += lrc[_i+3] + '\n';
			_tmp += lrc[_i+4] + '\n';
			_tmp += lrc[_i+5] + '\n';
			_tmp += lrc[_i+6] + '\n';
			_tmp += lrc[_i+7] + '\n';
			_tmp += lrc[_i+8] + '\n';
			_tmp += lrc[_i+9] + '\n';
			_tmp += lrc[_i+10] + '\n';
			_tmp += lrc[_i+11] + '\n';
			_tmp += lrc[_i+12] + '\n';
			_tmp += lrc[_i+13] + '\n';
			_tmp += lrc[_i+14] + '\n';
		}
		else {
			_tmp += "\c[line,15]" + lrc[_i - 1] + "\n\f[color,238,50,95]" + lrc[_i] + "\f[color,default]\n";
			_tmp += lrc[_i+1] + '\n';
			_tmp += lrc[_i+2] + '\n';
			_tmp += lrc[_i+3] + '\n';
			_tmp += lrc[_i+4] + '\n';
			_tmp += lrc[_i+5] + '\n';
			_tmp += lrc[_i+6] + '\n';
			_tmp += lrc[_i+7] + '\n';
			_tmp += lrc[_i+8] + '\n';
			_tmp += lrc[_i+9] + '\n';
			_tmp += lrc[_i+10] + '\n';
			_tmp += lrc[_i+11] + '\n';
			_tmp += lrc[_i+12] + '\n';
			_tmp += lrc[_i+13] + '\n';
			_tmp += lrc[_i+14] + '\n';
		}
		_txt += _tmp;
	}
	_txt;
}



/*
OnBalloonBreak
{
	ClearLrcVar;
}
*/


ClearLrcVar
{
	ERASEVAR("lrc");
	ERASEVAR("lrctime");
	ERASEVAR("lrcset");
	ERASEVAR("musicplaystart");
	ERASEVAR("musicplaytime");
}


PlayReplace
{
	if fjswitch
			fjswitch="-1"
	_argv[0]=REPLACE(_argv[0],']','\]')
	_argv[0]

}

IsVideo
{
	_file=_argv[0];
	_fileext=TOLOWER(SPLITPATH(_file)[3]);
	_isvideo=0;
	case _fileext
	{
			when ".avi",".wmv",".rm",".rmvb",".mp4",".mkv",".flv",".mpg"
			{
					_isvideo=1;
			}
	}
	_isvideo
}


OnPlayCmd
{
	// if fjswitch
	// 	fjswitch="-1"
	if FATTRIB(reference1)[0]==-1
	{
		temp="文件无效或不存在"
	}
	if IsVideo(reference1)&&rangevideojump&&musicplayerrange==1
	{
		OnNextMusic;
		return;
	}
	reference1=PlayReplace(reference1)
	"\C\![sound,%(reference0),%(reference1)]";
	--
	_path = SPLITPATH(reference1);
	_filelrc = _path[0] + _path[1] + _path[2] + '.lrc';
	_filetxt=_path[0] + _path[1] + _path[2] + '.txt';
	if ReadLrc(_filelrc) != "ok"
	{
		_filelrc =_path[0] + _path[1] + _path[2][1,'.'] + '.lrc';
	}
	if ReadLrc(_filelrc) != "ok"
	{
		_filelrc = lrcpath + _path[2] + '.lrc';
	}
	if ReadLrc(_filelrc) != "ok"
	{
		_filelrc = lrcpath + _path[2][1,'.'] + '.lrc';
	}
	if ReadTxt(_filetxt) != "ok"
	{
		_filetxt = lrcpath + _path[2] + '.txt';
	}
	if musicplaywithlrc == 1 && reference0 == "play" && ReadLrc(_filelrc) == "ok" {
		ShowLrc(musicplaytime);
	}
	if musicplaywithlrc == 1 && reference0 == "play" && ReadTxt(_filetxt) == "ok" {
		ShowLrc('txt');
	}
}


PlayWithLyric
{
	if fjswitch
		fjswitch="-1"
	_txt = "";
	_cmd = _argv[0];
	if ISVAR("musicplaywithlrc") == 0 || _argv[1] == 1 {
		musicplaywithlrc = 1;
	}
	elseif _argv[1] == 0 {
		musicplaywithlrc = 0;
	}
	_filemp3 = _argv[2];
		_filemp3=PlayReplace(_filemp3);t22=_filemp3
	if _cmd == "play" || _cmd == "loop" {
		FUNCTIONEX("saori\mciaudior.dll", "load", "%(_filemp3)")
		_txt += "\![raise,OnPlayCmd,%(_cmd),%(_filemp3)]";
		musicplaystart = GETTICKCOUNT();
		musicplaytime = 0;
		playingmusic = 1;
		if _cmd == "loop" {
			musicplaywithlrc = 0;
		}
	}
	elseif _cmd == "pause" {
		_txt += "\![sound,pause]";
		musicplaytime += GETTICKCOUNT() - musicplaystart;
		playingmusic = 2;
	}
	elseif _cmd == "resume" {
		FUNCTIONEX("saori\mciaudior.dll", "load", "%(_filemp3)")
		_txt += "\![sound,resume]";
		musicplaystart = GETTICKCOUNT();
		playingmusic = 1;
		if musicplaywithlrc == 1 && lrc != IARRAY {
			_txt += ShowLrc(musicplaytime);
		}
	}
	elseif _cmd == "stop" {
		_txt += "\![sound,stop]";
				 FUNCTIONEX("saori\mciaudior.dll", "stop")
		playingmusic = 0;
	}
	      _sound = reference0;
	_txt;
}

MusicHotKey
{
	_txt = "";
		 if _argv[0] == "p" && playingmusic == 0 {
	        _txt += OnMusicPlayer + "\s[25]" + PlayWithLyric("play",musiclrcenable,musicfile[2]);
	}

	elseif _argv[0] == "p" && playingmusic == 1 {
		_txt += "\![sound,pause]";
		musicplaytime += GETTICKCOUNT() - musicplaystart;
		playingmusic = 2;
	}
	elseif _argv[0] == "p" && playingmusic == 2 {
		_txt += "\![sound,resume]";
		musicplaystart = GETTICKCOUNT();
		playingmusic = 1;
	}
	elseif _argv[0] == "s" {
		_txt += "\![sound,stop]";
		playingmusic = 0;
	}
	elseif _argv[0] == "n" {
		_txt += OnNextMusic
	}
	elseif _argv[0] == "l" {
		_txt += OnLastMusic
	}
		elseif _argv[0] == "home" {
		_txt +=OnMusicPlayerList(_argv[0])
	}
	elseif _argv[0] == "end" {
		_txt += OnMusicPlayerList(_argv[0])
	}

	if musicplaywithlrc == 1 && playingmusic == 1 && lrc != IARRAY {
		_txt += ShowLrc(musicplaytime);
	}
	_txt;

}


//=======================================================
//Mini播放器程式
//入口：OnMusicPlayer()
//=======================================================

#define		M3UPATH		"profile\\default.m3u8"
#define		M3U8PATH        "profile\\playlist\\"

OnMusicPlayer
{
	if ISVAR("musicplaymode") == 0 {
		musicplaymode = 2;
	}
	if ISVAR("musiclrcenable") == 0 {
		musiclrcenable = 1;
	}
	DialogMusicOpenList

	if fjswitch
		fjswitch="-1"


	musicplayer=1
	_mode = ("普通","顺序播放","单曲循环","列表循环","乱序")[musicplaymode];
	_lrcenable = ("OFF"," ON")[musiclrcenable];
	_name = SPLITPATH(musicfile[2]);
	if temp!=null
	{
		_name=IARRAY;
		_name[2]=temp
		temp=null
	}
	_txt = "\![quicksession,true]\![set,choicetimeout,0]\1\c\s[12]\f[bold,1]Mini音乐播放器 ----\f[bold,default]\_l[145]\q[◇打开路径,OnMusicPathOpen]\_l[215]\q[◇关闭,OnMusicPlayerClose]\n%(_name[2] + _name[3])\n";
	//_txt += "\_l[0,39]";

	_now=TOINT(musicfile[1])+1+"/";
	_totol=musicfile[0]
	if musicplaymode==4||musicplayerrange
	{
		SETDELIM(musicrandlist,"*");
		_now=TOINT(musicfile[3])+1+"/";
		_totol=ARRAYSIZE(musicrandlist)-1
	}
	if musicfile[2]==""
	{
		_now=""
		_totol=""
	}
	_txt += "\_l[60,-]\f[color,93,188,91]\q[◄上一首,OnLastMusic]  \_l[120,-]\q[►下一首,OnNextMusic]\f[color,default]       %(_now)%(_totol)\n"

	_status =('play]\f[color,108,129,182]◇播放','pause]\f[color,229,134,82]◇暂停','resume]\f[color,108,129,182]◇继续')[playingmusic];
	_txt += "\__q[OnMusicPlayerCmd,%(_status)\f[color,default]\__q";
	// _txt += "\__q[OnMusicPlayerCmd,play]◇播放\f[color,default]\__q";
	_txt += "    \f[color,238,50,95]\q[◇停止,OnMusicPlayerCmd,stop]\f[color,default]    /
			\f[color,93,188,91]\q[◇播放列表,OnMusicPlayerList,openlist]\f[color,default]    /
			\f[color,128,66,255]\q[◇音量,OnMusicPlayerVolume]\f[color,default]\n";
	_txt += "\q[◇模式:%(_mode),OnMusicPlayMode]    \_l[110]\q[◇歌词卡:,OnMusicLrc]\q[%(_lrcenable),OnMusicSetLrc]\_l[195]\q[◇歌词目录,OnLrcfolder]\n";
	_txt += "\s[10]\0";
	if musicplayerlist
		_txt+=OnMusicPlayerList
	_txt=OnTranslate(_txt,language);
	_txt;
	// if fjswitch
	// 	fjswitch=language
}
OnMusicPathOpen
{
	_file=REPLACE(musicfile[2],'\','\\');
	_path=SPLITPATH(_file)[0]+SPLITPATH(_file)[1];
	_path=PlayReplace(_path);
	if fjswitch
		temp="fjswitch";
	"\C\![open,file,%(_path)]";
}

OnLrcfolder
{
	"\C\![open,dialog,folder,--id=lrcfolder,--title=请选择歌词文件夹，当前歌词文件夹为%(lrcpath)]";
}

OnMusicPlayerClose
{
	"\C\0\C\1\c\b[-1]";
	ERASEVAR("musicplayer");
	ERASEVAR("musicplayerlist");
	ERASEVAR("musiclist");
	ERASEVAR("musicrandlist");
}
ClearPlayerVar
{
	ERASEVAR("musicplayer");
	ERASEVAR("musicplayerlist");
	ERASEVAR("playingmusic");
	ERASEVAR("musiclist");
	ERASEVAR("musicrandlist");
	ERASEVAR("lrc");
	ERASEVAR("lrctime");
}


OnLrcClose
{
	"\0\c\b[-1]"
}

//打開音量調節程式
//---------------------------------------------------
OnMusicPlayerVolume
{
	_file = FUNCTIONEX("saori/advanced_sysinfo","get_special_folder_path",'System') + '\Sndvol32.exe';
	"\![open,file,%(_file)]";
	--
	_file = FUNCTIONEX("saori/advanced_sysinfo","get_special_folder_path",'System') + '\SndVol.exe';
	"\![open,file,%(_file)]";
	--
	OnMusicPlayer;
}

//設定播放模式
//---------------------------------------------------
OnMusicPlayMode
{
	musicplaymode = (musicplaymode + 1) % 5;
	if musicplayerrange==1||musicplayerrange==2
		GetRangeList(musicfile[1])
	elseif musicplaymode==4
		GetRandList(musicfile[1])
	else
		DialogMusicOpenList(M3U8PATH+musicfile[4]+".m3u8",1);
	--
	OnMusicPlayer;
}


//打开歌词卡
//---------------------------------------------------
OnMusicLrc
{
	_t=GETTICKCOUNT() - musicplaystart + musicplaytime
	ShowLrc(_t);
}


//設定是否顯示歌詞卡
//---------------------------------------------------
OnMusicSetLrc
{
	musiclrcenable = !musiclrcenable;
	OnMusicPlayer;
}

IsSelectList
{
	_id=_argv[0];
	_list=musiclistfile[3];
	_found=0;
	SETDELIM(_list,'|');
	if _list[_id]==1
	{
		1;
		return;
	}
	_found;return
}

//打開歌曲列表
//---------------------------------------------------
OnMusicPlayerList
{

	_txt = "\C\![quicksession,true]\c\0\s[40]\b[2]\![set,autoscroll,false]\![set,choicetimeout,0]\f[bold,1]播放列表 ----\f[bold,default]\_l[178]\q[◇关闭,OnMusicPlayListClose]\n[150]";
	DialogMusicOpenList(musiclistfile[0],-1);
		DefaultListName;
		//musicplayerlist=1
	_total = musicfile[0];
	_now = musicfile[1];
		_listnum=ARRAYSIZE(musiclistname)
		if reference0=="openlist"
		   musicplayerlist=(TOINT(musicplayerlist)+1)%2
		elseif reference0=="musicplayerscroll"
				musicplayerscroll=(TOINT(musicplayerscroll)+1)%2
		 elseif reference0=="musicplayerrange"
				musicplayerrange=(TOINT(musicplayerrange)+1)%3
		elseif reference0=="rangevideojump"
				rangevideojump=(TOINT(rangevideojump)+1)%2
	elseif reference0=="selectmusiclist"
	{
		_t=musiclistfile[3];
		SETDELIM(_t,'|');
		_t[TOINT(reference1)]=(TOINT(_t[TOINT(reference1)])+1)%2;
		_T="";
		for _i=0;_i<_listnum;_i++
		{
			_T+=_t[_i]+'|';
		}
		musiclistfile[3]=_T;
	}
	_txt += "\q[◇添加目录,OnMusicPlayListAdd,folder]   \q[◇添加文件,OnMusicPlayListAdd,file]   \q[◇添加列表,OnMusicPlayListAdd,addlist]\n/
		\q[◇新建列表,OnMusicPlayListAdd,newlist]   \q[◇另存列表,OnMusicPlayListAdd,savelist]   \q[◇打开列表,OnMusicPlayListAdd,openlist]  \q[◇清空列表,OnMusicPlayListAdd,clearlist]\n";
	_txt += "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\n"

	_id=TOINT(musiclistfile[1]);
		SETDELIM(musiclist,"*");
			   if musicplayerscroll==1&&TOINT(musicfile[4])!=TOINT(musiclistfile[1])&&playingmusic
					_txt+="\![raise,OnLoadMusicList,%(TOINT(musicfile[4]))]"
				if musicplayerscroll==1&&TOINT(music_listpage[_id])!=TOINT(musicfile[1]/100)&&playingmusic
					music_listpage[_id]=TOINT(musicfile[1]/100)

				if playingmusic && musicplayerscroll==1
					_txt+="\![set,autoscroll,enable]"
				if reference0=="top"||_argv[0]=="home"
					 _txt+="\![set,autoscroll,false]"

	   _m3u = M3U8PATH;
		 _t="禁用,歌曲"[musicplayerscroll]
		_txt+="\n[half]◇\q[卷动模式:%(_t),OnMusicPlayerList,musicplayerscroll]\n"
		_t="当前列表,全部列表,选定列表"[musicplayerrange]
		_txt+="◇\q[播放范围:%(_t),OnMusicPlayerList,musicplayerrange]"
rangevideojump=TOINT(rangevideojump)
_t="OFF,ON"[rangevideojump]
		_txt+="\_l[150]\q[全部列表时跳过视频:%(_t),OnMusicPlayerList,rangevideojump]\n"
		_txt+="\q[◇到底端（end）,OnMusicPlayerList,bottom]\n[150]"
		for _i=0;_i<_listnum;_i++
		{
		 _t=musiclistname[_i][0,'|']
		 _name=musiclistname[_i][1,'|']
	_selectlist="□,■"[IsSelectList(_i)];
		if musiclistfile[0]==_m3u+_t+".m3u8"
		  {
				 _txt+="\__q[OnLoadMusicList,%(_i)]\f[color,238,50,95]歌曲列表%(_t) %(_name)\f[color,default]\__q"
		 }
		 else
		_txt+="\__q[OnLoadMusicList,%(_i)]歌曲列表%(_i) %(_name)\__q"
		if musicplayerrange==2
		_txt+="\_l[170]\__q[OnMusicPlayerList,selectmusiclist,%(_i)]%(_selectlist)\__q"
		_txt+= "\_l[195]\__q[OnMusicPlayListAdd,renamelist,%(_i)]重命名\_l[240]\__q[OnListNameMove,listup,%(_i)]\[↑\__q\__q[OnListNameMove,listdown,%(_i)]↓\__q\__q[OnListNameMove,listdelete,%(_i)]X\]\__q\f[color,default]\n"


		}
   _txt+="\n[half]"
	_txt+=OnMusicListPageTxt

	for _i = 0+music_listpage[_id]*100; _i < _total&&_i<(music_listpage[_id]+1)*100; _i ++ {
				_path=musiclist[_i];
				_path=REPLACE(_path,']','\]')
		_tmp = (_i + 1) + "\_l[14]: \__q[OnSelectMusic,%(_i),%(_path)]" + SPLITPATH(musiclist[_i])[2] + "\__q";
		if _i == _now&&TOINT(musicfile[4])==musiclistfile[1]{
			_status = ('\f[color,108,129,182]','\f[color,238,50,95]','\f[color,229,134,82]')[playingmusic];
			_tmp =_status + _tmp;
		}

					if _i-13==_now &&playingmusic && musicplayerscroll==1
					   _tmp+="\![set,autoscroll,false]"
		_tmp += "        \_l[240]\__q[OnMusicPlayListMove,up,%(_i)]\[↑\__q\__q[OnMusicPlayListMove,down,%(_i)]↓\__q\__q[OnMusicPlayListMove,delete,%(_i)]X\]\__q\f[color,default]\n"

		_txt += _tmp;
	}
	   _txt+=OnMusicListPageTxt
	   _txt+="\n[150]\q[◇到顶端（home）,OnMusicPlayerList,top]"
	   if reference0=="bottom"||_argv[0]=="end"
		  _txt+="\![set,autoscroll,enable]"
		  if TOINT(musicplayerlist)==0
		  {
			  _txt+="\0\b[-1]"
		   }

		 _txt=OnTranslate(_txt,language);
	 _txt;
}

OnMusicListPageTxt
{
	_txt="";
	_id=TOINT(musiclistfile[1]);
	music_listpage[_id]=music_listpage[_id]%(musicfile[0]/100+1);
	_txt+="\_l[130]\q[%(music_listpage[_id]+1)/%(musicfile[0]/100+1),OnInputMusicPage]";
	if music_listpage[_id]==0
		_txt+="\_l[170]\q[一>>,OnMusicListPage,%(music_listpage[_id]+1)]";
	elseif music_listpage[_id]==book_dexnum-1
		_txt+=" \_l[90]\q[<<一,OnMusicListPage,%(music_listpage[_id]-1)]";
	else
		_txt+="\_l[90]\q[<<一,OnMusicListPage,%(music_listpage[_id]-1)]   \_l[170]\q[一>>,OnMusicListPage,%(music_listpage[_id]+1)]";

	if music_listpage[_id]==0
		_txt+="\_l[200]\q[十>>,OnMusicListPage,%(music_listpage[_id]+10)]";
	elseif music_listpage[_id]==book_dexnum-1
		_txt+=" \_l[60]\q[<<十,OnMusicListPage,%(music_listpage[_id]-10)]";
	else
		_txt+=" \_l[60]\q[<<十,OnMusicListPage,%(music_listpage[_id]-10)]   \_l[200]\q[十>>,OnMusicListPage,%(music_listpage[_id]+10)]";

	if music_listpage[_id]==0
		_txt+="\_l[230]\q[百>>,OnMusicListPage,%(music_listpage[_id]+100)]";
	elseif music_listpage[_id]==book_dexnum-1
		_txt+=" \_l[30]\q[<<百,OnMusicListPage,%(music_listpage[_id]-100)]";
	else
		_txt+=" \_l[30]\q[<<百,OnMusicListPage,%(music_listpage[_id]-100)]   \_l[230]\q[百>>,OnMusicListPage,%(music_listpage[_id]+100)]";


	if music_listpage[_id]==0
		_txt+="\_l[260]\q[千>>,OnMusicListPage,%(music_listpage[_id]+1000)]";
	elseif music_listpage[_id]==book_dexnum-1
		_txt+=" \_l[0]\q[<<千,OnMusicListPage,%(music_listpage[_id]-1000)]";
	else
		_txt+=" \_l[0]\q[<<千,OnMusicListPage,%(music_listpage[_id]-1000)]   \_l[260]\q[千>>,OnMusicListPage,%(music_listpage[_id]+1000)]";
_txt+="\n"
	_txt
}

OnInputMusicPage
{
	"\C\![open,inputbox,OnMusicListPage,-1,%(music_listpage[_id]+1)]";
	temp="input";
}

OnMusicListPage
{
	_id=TOINT(musiclistfile[1])
	music_listpage[_id]=TOINT(reference0);
	if _argc>0
		music_listpage[_id]=TOINT(_argv[0]);
	if temp=="input"
	{
		if music_listpage[_id]>0
			music_listpage[_id]--;
		temp=null;
	}
	if music_listpage[_id]<0
		music_listpage[_id]=0;
	elseif music_listpage[_id]>=musicfile[0]/100+1
		music_listpage[_id]=musicfile[0]/100;

	OnMusicPlayerList;

}

//移動歌曲
//---------------------------------------------------
OnMusicPlayListMove
{
		SETDELIM(musiclist,"*");
	if reference0 == 'up' {
		if reference1 > 0 {
			_tmp = musiclist[reference1 - 1];
			musiclist[reference1 - 1] = musiclist[reference1];
			musiclist[reference1] = _tmp;
			if reference1 == musicfile[1] {
				musicfile[1] --;
			}
			elseif reference1 == musicfile[1] + 1 {
				musicfile[1] ++;
			}
		}
	}
	elseif reference0 == 'down' {
		if reference1 < musicfile[0] - 1 {
			_tmp = musiclist[reference1 + 1];
			musiclist[reference1 + 1] = musiclist[reference1];
			musiclist[reference1] = _tmp;
			if reference1 == musicfile[1] {
				musicfile[1] ++;
			}
			elseif reference1 == musicfile[1] - 1 {
				musicfile[1] --;
			}
		}
	}
	elseif reference0 == 'delete'  {
		musiclist[reference1] = IARRAY;
		musicfile[0] --;
		if reference1 == musicfile[1] {
			musicfile[1] = 0;
			musicfile[2] = musiclist[0];
		}
	}

	DialogMusicSaveList(musiclistfile[0],1);
	OnMusicPlayerList;
}



//移動歌曲列表
//---------------------------------------------------
OnListNameMove
{
	   _m3u="profile\playlist\";
	   if reference0 == 'listup' {
		if reference1 > 0 {
			_tmp = musiclistname[reference1 - 1];
			musiclistname[reference1 - 1] = musiclistname[reference1];
			musiclistname[reference1] = _tmp;
						if reference1==musiclistfile[1]
						{
						_t=_tmp[0,'|']
						_name=_tmp[1,'|']
						musiclistfile[0]=_m3u+_t+".m3u8"
						musiclistfile[1]=reference1-1
						}
						elseif reference1 - 1==musiclistfile[1]
						{
						_t=musiclistname[reference1-1][0,'|']
						_name=musiclistname[reference1-1][1,'|']
						musiclistfile[0]=_m3u+_t+".m3u8"
						musiclistfile[1]=reference1
						}

		}
	}
	elseif reference0 == 'listdown' {
		if reference1 < ARRAYSIZE(musiclistname) - 1 {
			_tmp = musiclistname[reference1 + 1];
			musiclistname[reference1 + 1] = musiclistname[reference1];
			musiclistname[reference1] = _tmp;
						if reference1==musiclistfile[1]
						{
						_t=_tmp[0,'|']
						_name=_tmp[1,'|']
						musiclistfile[0]=_m3u+_t+".m3u8"
						musiclistfile[1]=reference1+1
						}
						elseif reference1 + 1==musiclistfile[1]
						{
						_t=musiclistname[reference1+1][0,'|']
						_name=musiclistname[reference1+1][1,'|']
						musiclistfile[0]=_m3u+_t+".m3u8"
						musiclistfile[1]=reference1
						}

		}
	}
	elseif reference0 == 'listdelete'  {
				_i=reference1
				_t=musiclistname[_i][0,'|']
				_file=_m3u+_t+".m3u8"
				_t=FDEL(_file)
	}

		DefaultListRename
	OnMusicPlayerList;
}


//默认歌曲列表读取
//---------------------------------------------------
DefaultListName
{
_m3u = M3U8PATH;
_temp=FENUM(_m3u);
_temp=ARRAYSIZE(_temp);
musiclistname=IARRAY;
_t=MKDIR(_m3u);
_j=0
for _i=0;_i<_temp;_i++
{
_file=_m3u+_i+".m3u8"
	if FOPEN(_file,'r')
	   {

	while (_buff = FREAD(_file)) != -1
	  {
		if  '#TITLE' _in_ _buff
		 {
		  musiclistname[_j]=_i+"|"+_buff[1,':']
		  _j++
		 }
	  }

	   }
_t=FCLOSE(_file);


}

DefaultListRename
_temp=ARRAYSIZE(musiclistname);
if _temp==0
{
musiclistfile[0]=_m3u+0+".m3u8"
musiclistfile[1]=0
musiclistfile[2]="[默认]"
ERASEVAR("musiclistname")
_m3u = M3UPATH;
if FATTRIB(_m3u)[0]==1
{
DialogMusicOpenList
DialogMusicSaveList(musiclistfile[0],1);

}

}

}


//默认歌曲列表重命名
//---------------------------------------------------
DefaultListRename
{
_m3u = M3U8PATH;
_temp=ARRAYSIZE(musiclistname);
for _i=0;_i<_temp;_i++
{
_name=musiclistname[_i][0,'|']
_file=_m3u+_name+".m3u8"
_replace=_m3u+_i+" .m3u8"
_t=FRENAME(_file,_replace);
}

for _i=0;_i<_temp;_i++
{
_file=_m3u+_i+" .m3u8"
_replace=_m3u+_i+".m3u8"
_t=FRENAME(_file,_replace);
}



}

//读取歌曲列表
//---------------------------------------------------
OnLoadMusicList
{
_m3u = M3U8PATH;
_i=reference0
	if _argc > 0 {
		_i = _argv[0];
	}
 _t=musiclistname[_i][0,'|']
		 _name=musiclistname[_i][1,'|']


musiclistfile[0]=_m3u+_t+".m3u8"
musiclistfile[1]=_i
musiclistfile[2]=_name
OnMusicPlayerList;

}

//歌曲列表重命名操作
//---------------------------------------------------
OnMusicListRename
{
_replace=reference0
_m3u = M3U8PATH;
 _i=TOINT(musiclistfile[1])
 _t=musiclistname[_i][0,'|']
 _name=musiclistname[_i][1,'|']
_file=_m3u+_t+".m3u8"
MusicListReName(_file,_replace)
OnMusicPlayerList;
}

//歌曲列表创建
//---------------------------------------------------
OnMusicListCreat
{
_m3u = M3U8PATH;
if reference0!=""
musiclistfile[2]=reference0

_t=musiclistfile[1]
_file=_m3u+_t+".m3u8"
musiclistfile[0]=_file
FCHARSET(1);
_t = FOPEN(_file,'w');
				_buff="#TITLE:"+musiclistfile[2]
		_t = FWRITE(_file,_buff);
		FCLOSE(_file);
FCHARSET(1);

OnMusicPlayerList;
}


//歌曲列表重命名
//---------------------------------------------------
MusicListReName
{
_file=_argv[0]
_replace=_argv[1]
_musiclist=IARRAY
FCHARSET(1);
if FOPEN(_file,'r')
{
			while (_buff = FREAD(_file)) != -1
					   {
				if _buff != '' && '#TITLE' !_in_ _buff && '#EXTM3U' !_in_ _buff && '#EXTINF' !_in_ _buff
							   {
					if SPLITPATH(_buff)[0] == ""
										{
						_buff = _m3upath[0] + _m3upath[1] + _buff;
					}
					_musiclist ,= _buff;
				}
			}
		}
		FCLOSE(_file);

				_t = FOPEN(_file,'w');
				_buff="#TITLE:"+_replace
		_t = FWRITE(_file,_buff);
		_t = FWRITE(_file,"#EXTM3U");
		foreach _musiclist; _i {
			_t = FWRITE(_file,_i);
		}
		FCLOSE(_file);
		FCHARSET(1);





}


//添加列表操作
//---------------------------------------------------
DialogMusicAddList
{
_m3u = M3U8PATH;
_file = _argv[0];
musiclistfile[1]=ARRAYSIZE(musiclistname)
musiclistfile[2]=SPLITPATH(_file)[2];
_t=musiclistfile[1]
_file=_m3u+_t+".m3u8"
musiclistfile[0]=_file
DialogMusicOpenList(_argv[0]);
DialogMusicSaveList(_file,1);




}


//打開列表操作
//---------------------------------------------------
DialogMusicOpenList
{
	_m3u = M3UPATH;
	if _argc > 0 {
		_m3u = _argv[0];
	}
	_m3upath = SPLITPATH(_m3u);
	_m3uext = TOLOWER(_m3upath[3]);

	if _m3uext == ".m3u" || _m3uext == ".m3u8" {
		if _m3uext == ".m3u" {
			FCHARSET(127);
		}
		elseif _m3uext == ".m3u8" {
			FCHARSET(1);
		}
				_range=0;

			   if musicplayerrange&&_argc==0
				{
				musicrandlist=""
				}
			   elseif  musicplayerrange==0&&_argv[1]==2
			 musicrandlist=""
			  elseif !(musicplayerrange&&_argv[1]==2)
	      {
			musiclist = "";
			  }

if  _argv[1]!=-1&& _argv[1]!=2
   musicrandlist=""
		_total = 0;
		if FOPEN(_m3u,'r') {
			while (_buff = FREAD(_m3u)) != -1 {
				if _buff != '' && '#TITLE' !_in_ _buff && '#EXTM3U' !_in_ _buff && '#EXTINF' !_in_ _buff {
					if SPLITPATH(_buff)[0] == "" {
						//_buff = _m3upath[0] + _m3upath[1] + _buff;
					}
										if musicplayerrange&&_argv[1]==2
										musicrandlist += "%(_buff)"+"|"+_total+"|"+_argv[2]+"*"
										elseif musicplayerrange&&_argc==0
										{
										 musicrandlist+="%(_buff)*";

										}
elseif musicplayerrange==0&&_argv[1]==2
{
	musicrandlist+="%(_buff)*";
}
										else
					{
					musiclist += "%(_buff)*";
if _argv[1]!=-1&& _argv[1]!=2
					musicrandlist+="%(_buff)*";
					}
					_total ++;
				}
			}
		}
		FCLOSE(_m3u);
		FCHARSET(1);
		if ISVAR("musicfile") == 0 {
			musicfile = IARRAY;
		}
				if ARRAYSIZE(musicfile)>5
				musicfile=IARRAY;
		musicfile[0] = _total;
				if musicplayerrange
				{
					_tmp = TOINT(musicfile[3]);
						SETDELIM(musicrandlist,"*");
			musicfile[2] = musicrandlist[_tmp][0,'|'];
						if _argv[1]==2
						 musicfilecount[_argv[2]]=_total
				}

				elseif musicplaymode == 4 {
			_tmp = TOINT(musicfile[3]);
						 if _argc==0{
							musicrandlist=musiclist
						 }
						SETDELIM(musicrandlist,"*");
			musicfile[2] = musicrandlist[_tmp][0,'|'];
				 }
	        elseif musicfile[1] == "" || musicfile[1] >= _total{
			musicfile[1] = 0;
		}
				else {
		         _tmp = musicfile[1];
						  SETDELIM(musicrandlist,"*");
	               	musicfile[2] = musicrandlist[_tmp];
				}

				if _argc > 0 && _argv[1]==1{
				 DialogMusicSaveList
				}
		elseif _argc > 0 && _argv[1]!=-1&& _argv[1]!=2{
			DialogMusicSaveList(musiclistfile[0],1);
		}

	}
}

//保存列表操作
//---------------------------------------------------
DialogMusicSaveList
{
	_m3u = M3UPATH;
	if _argc > 0 &&_argv[0]!=-1{
		_m3u = _argv[0];
	}
	_m3uext = TOLOWER(SPLITPATH(_m3u)[3]);
	if _m3uext == ".m3u" || _m3uext == ".m3u8" {
		if _m3uext == ".m3u" {
			FCHARSET(127);
		}
		elseif _m3uext == ".m3u8" {
			FCHARSET(1);
		}
		_t = FOPEN(_m3u,'w');
				if _argv[1]==1
				{
				_buff="#TITLE:"+musiclistfile[2]
		_t = FWRITE(_m3u,_buff);

				 }
		_t = FWRITE(_m3u,"#EXTM3U");
				_musiclist=musiclist
				if _argc==0&& (musicplaymode == 4||musicplayerrange){
				_musiclist=musicrandlist
				}
				SETDELIM(_musiclist,"*");
		foreach _musiclist; _i {
			_t = FWRITE(_m3u,_i);
		}
		FCLOSE(_m3u);
		FCHARSET(1);
	}
}

OnMusicPlayListClose
{

 "\C\0\b[-1]";
	ERASEVAR("musicplayerlist");
}

//取得乱序播放列表
//---------------------------------------------------
GetRandList
{
	  if _argc>0
	   musicfile[1]=_argv[0]
	  if _argv[1]!=null
		   musicfile[4]=TOINT(_argv[1])
  _m3u = M3U8PATH;
	_file=_m3u+musicfile[4]+".m3u8";
		DialogMusicOpenList(_file,2);
	   _music=IARRAY;

		_musicrandlist=musicrandlist
		 musicrandlist=""
		SETDELIM(_musicrandlist,"*");
		for _i=0;_i<musicfile[0];_i++
		{
		 if _i!=musicfile[1]
		  {
			_music[_i]=_musicrandlist[_i]
		  }
		 else
		  _music[_i]=-1
		 }
	   _temp=TOINT(musicfile[1]);
	   musicfile[2]=_musicrandlist[_temp];
	   musicrandlist+=musicfile[2]+"|"+_temp+"|"+musicfile[4]+"*"  ;
	  _count=musicfile[0]
		for _i=0;_i<_count-1;_i++
		{
			_k=RAND(_count)
			while _music[_k]==-1
			{
			   _k=RAND(_count)
			}

			 musicrandlist+=_music[_k]+"|"+_k+"|"+musicfile[4]+"*"
			 _music[_k]=-1
		 }
		SETDELIM(musicrandlist,"*");
		//musicfile[4]=musiclistfile[1];
		musicfile[3]=0;
	musicfile[2] = musicrandlist[0][0,'|'];

		DialogMusicSaveList
}


//取得范围播放列表
//---------------------------------------------------
GetRangeList
{
	if _argc>0
		musicfile[1]=_argv[0];
	if _argv[1]!=null
		musicfile[4]=TOINT(_argv[1])
	if musicplaymode == 4
	{
		_music=IARRAY;;
		musicrandlist="";
		_listnum=ARRAYSIZE(musiclistname);
		_m3u = M3U8PATH;
		_txt="";
		for _i=0;_i<_listnum;_i++
		{
			_t=musiclistname[_i][0,'|'];
			_name=musiclistname[_i][1,'|'];
			_file=_m3u+_t+".m3u8";
			if musicplayerrange==2
			{
				if IsSelectList(_i)
					_txt+=DialogMusicOpenList(_file,2,_i);
			}
			else
				_txt+=DialogMusicOpenList(_file,2,_i);
		}
		_musicrangelist=musicrandlist;
		musicrandlist="";
		SETDELIM(_musicrangelist,"*");

		_id=0
		_n=musicfile[4];ttt=_n
		musicfile[3]=0;
		for _i=0;_i<TOINT(_n);_i++
		{
			musicfile[3]+=musicfilecount[_i];
		};
		musicfile[3]+=musicfile[1];
		_id=TOINT(musicfile[3]);
		musicfile[2] = _musicrangelist[_id][0,'|'];


		_totol=ARRAYSIZE(_musicrangelist)-1;
		for _i=0;_i<_totol;_i++
		{
			if _i!=musicfile[1]
			{
				_music[_i]=_musicrangelist[_i];
			}
			else
				_music[_i]=-1;
		}
		_temp=TOINT(musicfile[1]);
		musicrandlist+=musicfile[2]+"|"+_temp+"|"+musicfile[4]+"*" ;
		for _i=0;_i<_totol-1;_i++
		{
			_k=RAND(_totol);
			while _music[_k]==-1
			{
			   _k=RAND(_totol);
			}
			musicrandlist+=_music[_k][0,'|']+"|"+_music[_k][1,'|']+"|"+_music[_k][2,'|']+"*";
			_music[_k]=-1;
		}

		SETDELIM(musicrandlist,"*");
		//  musicfile[4]=musiclistfile[1];
		musicfile[3]=0;
		musicfile[2] = musicrandlist[0][0,'|'];
		musicfilecount=null;
		_txt+=DialogMusicSaveList;
		_txt;
	}else{
		musicrandlist="";
		_listnum=ARRAYSIZE(musiclistname);
		_m3u = M3U8PATH;
		_txt="";
		for _i=0;_i<_listnum;_i++
		{
			_t=musiclistname[_i][0,'|'];
			_name=musiclistname[_i][1,'|'];
			_file=_m3u+_t+".m3u8";

			if musicplayerrange==2
			{
				if IsSelectList(_i)
					_txt+=DialogMusicOpenList(_file,2,_i);
			}else
				_txt+=DialogMusicOpenList(_file,2,_i);
		}

		SETDELIM(musicrandlist,"*");
		_id=TOINT(musicfile[3]);
		_n=musicfile[4];
		musicfile[3]=0;


		for _i=0;_i<TOINT(_n);_i++
		{
			musicfile[3]+=musicfilecount[_i];
		};
		musicfile[3]+=musicfile[1];
		musicfile[2] = musicrandlist[_id][0,'|']
		musicfilecount=null;

		_txt+=DialogMusicSaveList;
		_txt;
	}
}


//選擇歌曲播放
//---------------------------------------------------
OnSelectMusic
{
		_txt="\C\![quicksession,1]\c\![sound,stop]\![sound,wait]"
	musicfile[2] = musiclist[reference0];
		if musicplayerrange
		_txt+=GetRangeList(reference0,"%(musiclistfile[1])")
		elseif  musicplaymode == 4
		{
		_txt+=GetRandList(reference0,"%(musiclistfile[1])")
		}


		else
		{
		DialogMusicOpenList(musiclistfile[0],1)
	musicfile[1] = reference0;
		SETDELIM(musicrandlist,"*");
		//SETDELIM(musiclist,"*");
	musicfile[2] = musicrandlist[reference0];
		musicfile[4]=musiclistfile[1];
		}

		_txt += OnMusicPlayerList
	_txt += OnMusicPlayer + "\s[25]" + PlayWithLyric("play",musiclrcenable,musicfile[2]);

	_txt;
}

//選擇上一曲
//---------------------------------------------------
OnLastMusic
{
	_txt="\![sound,stop]\![sound,wait]"
	 if musicplaymode == 4 ||musicplayerrange{
						SETDELIM(musicrandlist,"*");
						musicfile[0]=ARRAYSIZE(musicrandlist)-1
						musicfile[3]=(musicfile[0] + musicfile[3] - 1)%musicfile[0];
						musicfile[4]=musicrandlist[musicfile[3]][2,'|'];
					musicfile[1]= musicrandlist[musicfile[3]][1,'|'];
						musicfile[1]=TOINT(musicfile[1])
			_tmp =musicfile[3];
			musicfile[2] = musicrandlist[_tmp][0,'|'];
						if playingmusic==1
			_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);

		}

		elseif musicplaymode == 0 || musicplaymode == 1 || musicplaymode == 2 || musicplaymode == 3 {
						musicfile[1]=(musicfile[0] + musicfile[1] - 1)%musicfile[0];
			_tmp = musicfile[1];
						SETDELIM(musicrandlist,"*");
						//SETDELIM(musiclist,"*");
						//musicfile[4]=musiclistfile[1]
			musicfile[2] = musicrandlist[_tmp];
						if playingmusic==1
	                _txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);
		 }


_txt+=OnMusicPlayer
_txt

}

//選擇下一曲
//---------------------------------------------------
OnNextMusic
{
		 _txt="\![sound,stop]\![sound,wait]"

	 if musicplaymode == 4 ||musicplayerrange{
						SETDELIM(musicrandlist,"*");
						musicfile[0]=ARRAYSIZE(musicrandlist)-1
						musicfile[3]=(musicfile[0]+musicfile[3] + 1)%musicfile[0];
						musicfile[4]=musicrandlist[musicfile[3]][2,'|'];
					musicfile[1]= musicrandlist[musicfile[3]][1,'|'];
						musicfile[1]=TOINT(musicfile[1])
			_tmp =musicfile[3];
			musicfile[2] = musicrandlist[_tmp][0,'|'];
						if playingmusic==1
			_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);

	   }



		elseif musicplaymode == 0 ||  musicplaymode == 1 || musicplaymode == 2 || musicplaymode == 3 {
						musicfile[1]=(musicfile[0] + musicfile[1] + 1)%musicfile[0];
			_tmp = musicfile[1];
						SETDELIM(musicrandlist,"*");
						//musicfile[4]=musiclistfile[1]
			musicfile[2] = musicrandlist[_tmp];
						if playingmusic==1
	               _txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);

		}


_txt+=OnMusicPlayer
_txt


}


//當音樂結束時
//---------------------------------------------------
OnSoundStop
{
	_txt="";
	if fjswitch
		fjswitch="-1";
	_ref=FUNCTIONEX("saori\ChConverter.dll", "simplified",reference0);
	_temp=FUNCTIONEX("saori\ChConverter.dll", "simplified",musicfile[2]);
	if playLinkWnd&&!linkwndmusic&&freemode && linkmusicfile _in_ reference0 {
		_txt = "\C";
		musicid++;
		musicid=musicid%12;
		linkmusicfile=playlinkmusic[musicid]
		_txt+="\![sound,stop]\![sound,wait]"
		_txt+=PlayWithLyric("play",musiclrcenable,linkmusicfile);
	}
	elseif playingmusic && TOSTR(_ref) ==TOSTR(_temp){
		_txt = "\C";
		kikkamood=TOINT(kikkamood)+10;
		if ISVAR("musicrandlist")==0&&musicplayerrange|| ISVAR("musiclist")==0&&musicplayerrange==0
			DialogMusicOpenList;
		SETDELIM(musiclist,"*");
		_txt+="\![sound,stop]\![sound,wait]"
		playingmusic = 0;
		ClearLrcVar;
		if musicplaymode == 1
		{
			_stop=0;
			if musicplayerrange
			{
				SETDELIM(musicrandlist,"*");
				if musicfile[3]<ARRAYSIZE(musicrandlist)-2
					musicfile[3]=musicfile[3] + 1;
				else
					_stop=1;
				musicfile[4] = musicrandlist[musicfile[3]][2,'|'];
				musicfile[1] = musicrandlist[musicfile[3]][1,'|'];
				musicfile[1] = TOINT(musicfile[1])
				_tmp = TOINT(musicfile[3]);
				musicfile[2] = musicrandlist[_tmp][0,'|'];
			}else{
				SETDELIM(musicrandlist,"*");
				if musicfile[1]<ARRAYSIZE(musicrandlist)-2
					musicfile[1] = musicfile[1] + 1;
				else
					_stop=1;
				_tmp = musicfile[1];
				musicfile[2] = musicrandlist[_tmp];
				//musicfile[4]=musiclistfile[1]
			}
			if _stop==0
				_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);
		}

		elseif musicplaymode == 2 {
			_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);
		}
		elseif musicplaymode == 3 {
			if musicplayerrange
			{
				SETDELIM(musicrandlist,"*");
				musicfile[0]=ARRAYSIZE(musicrandlist)-1
				musicfile[3]=(musicfile[0]+musicfile[3] + 1)%musicfile[0];
				musicfile[4]=musicrandlist[musicfile[3]][2,'|'];
				musicfile[1]= musicrandlist[musicfile[3]][1,'|'];
				musicfile[1]=TOINT(musicfile[1])
				_tmp =musicfile[3];
				musicfile[2] = musicrandlist[_tmp][0,'|'];
			}else{
				SETDELIM(musicrandlist,"*");
				musicfile[1] = (musicfile[1] + 1) % musicfile[0];
				_tmp = musicfile[1];
				musicfile[2] = musicrandlist[_tmp];
				//musicfile[4]=musiclistfile[1]
			}
			_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);
		}
		elseif musicplaymode == 4|| musicplayerrange{
			SETDELIM(musicrandlist,"*");
			musicfile[0]=ARRAYSIZE(musicrandlist)-1
			musicfile[3]=(musicfile[0]+musicfile[3] + 1)%musicfile[0];
			musicfile[4]=musicrandlist[musicfile[3]][2,'|'];
			musicfile[1]= musicrandlist[musicfile[3]][1,'|'];
			musicfile[1]=TOINT(musicfile[1])
			_tmp = musicfile[3];
			musicfile[2] = musicrandlist[_tmp][0,'|'];
			_txt += PlayWithLyric("play",musiclrcenable,musicfile[2]);
		}
	}
	if japwordeachday==2
	{
		_txt="\c"
		japwordeachday=1
	}
	if musicplayer&&!playLinkWnd
		_txt+="\0\c\b[-1]"+OnMusicPlayer
	if shutdownstart==1
		_txt+="\0\c\b[-1]"
	_txt;
}

//播放器面板的選項按鈕動作
//---------------------------------------------------
OnMusicPlayerCmd
{
	_temp=null;
	if FATTRIB(musicfile[2])[0]==-1
	{
		_temp="文件无效或不存在";
	}

	_txt = "";
	if reference0 == 'play' {
		 temp=_temp
		_txt += "\s[25]" + PlayWithLyric("play",musiclrcenable,musicfile[2]);
	}
	elseif reference0 == 'pause' {
		_txt += "\s[0]" + PlayWithLyric("pause");
	}
	elseif reference0 == 'resume' {
		temp=_temp
		_txt += "\s[25]" + PlayWithLyric("resume",musiclrcenable);
	}
	elseif reference0 == 'stop' {
		_txt += "\s[0]" + PlayWithLyric("stop");
		_txt+=OnStopSpVoice.vbs;//仅在tts语音开启时使用
	}
	_txt += OnMusicPlayer ;
	_txt;
}

//播放列表的選項按鈕動作
//---------------------------------------------------
OnMusicPlayListAdd
{
	if reference0 == 'folder' {
		"\C\![open,dialog,folder,--id=musicfolder,--title=请选择音乐文件夹]";
	}
	elseif reference0 == 'file' {
		"\C\![open,dialog,open,--id=musicfile,--title=请选择音乐文件,--filter=音乐文件(mid;wav;mp3;m4a;au;ogg;wma;ape;flac;avi;wmv;rm;rmvb;mp4;mkv;flv)|*.mid;*.wav;*.mp3;*.m4a;*.au;*.ogg;*.wma;*.ape;*.flac,*avi,*.wmv,*.rm,*.rmvb,*.mp4,*.mkv,*.flv,*.mpg]";
	}
	elseif reference0 == 'savelist' {
		"\C\![open,dialog,save,--id=musicsavelist,--title=请输入要保存的列表文件,--filter=M3U 文件(m3u)|*.m3u|M3U8 文件(m3u8)|*.m3u8,--ext=m3u|m3u8]";
	}
	elseif reference0 == 'openlist' {
		"\C\![open,dialog,open,--id=musicopenlist,--title=请选择列表文件,--filter=M3U 文件(m3u;m3u8)|*.m3u;*.m3u8]";
	}
	elseif reference0 == 'addlist' {
		"\C\![open,dialog,open,--id=musicaddlist,--title=请选择列表文件,--filter=M3U 文件(m3u;m3u8)|*.m3u;*.m3u8]";
	}



	elseif reference0 == 'newlist' {
		 musiclistfile[1]=ARRAYSIZE(musiclistname)
		 musiclistfile[2]="新列表"+musiclistfile[1]
		"\C\![open,inputbox,OnMusicListCreat,-1,%(musiclistfile[2])] ";
	}
	elseif reference0 == 'renamelist' {
		_i=reference1
		musiclistfile[1]=_i
		_t=musiclistname[_i][0,'|']
		_name=musiclistname[_i][1,'|']
		"\C\![open,inputbox,OnMusicListRename,-1,%(_name)] ";
	}

	elseif reference0 == 'clearlist' {
	  	musiclist="";
			DialogMusicSaveList(musiclistfile[0],1);
		OnMusicPlayerList;
	}
}


//dialog事件的處理函式
//---------------------------------------------------
OnSystemDialog
{
	if reference1 == "musicfolder" {
		DialogMusicFolder(reference2);
	}

	elseif reference1 == "lrcfolder" {
		DialogLrcFolder(reference2);
	}

	elseif reference1=="filerenamefolder"{
			DialogFileRenameFolder(reference2)
	}

	elseif reference1 == "musicfile" {
		DialogMusicFile(reference2);
	}
	elseif reference1 == "musicsavelist" {
		DialogMusicSaveList(reference2);
		OnMusicPlayerList;
	}
	elseif reference1 == "musicopenlist" {
		DialogMusicOpenList(reference2);
		OnMusicPlayerList;
	}
	elseif reference1 == "musicaddlist" {
		DialogMusicAddList(reference2);
		OnMusicPlayerList;
	}

	elseif reference1 == "shortcutlistfile" {
		OnFileDrop2(reference2);
	}
	elseif reference1 == "shortcutopenlist" {
		OnFileDrop2(reference2);
	}
	elseif reference1 == "shortsavelist" {
		SaveShortCutCfg(reference2);
	}
	elseif reference1 == "shortcutsavemenu" {
		SaveShortCutDat(reference2);
	}
	elseif reference1 == "shortcutaddmenu" {
		OnShortCutMenuAdd(reference2);
	}
	elseif reference1 == "shortcutopenmenu" {
		LoadShortCutDat(reference2,"open");
		OnShortcutMenu
	}

	elseif reference1 == "notepadcolor" {
		DialogNotePadColor(reference2);
	}
	elseif reference1 == "wallpaper" {
		DialogWallPaper(reference2);
	}
	elseif reference1 == "alarmfile" {
		DialogSetAlarmFile(reference2);
	}
	elseif reference1 == "filesrenameopencon"{
		   DialogFilesRenameOpenCon(reference2);
		   OnFilesRename
	}
	elseif reference1 == "filesrenamesavecon"{
		   DialogFilesRenameSaveCon(reference2);
	}

	elseif reference1 == "readbook"{
		  OnOpenBook(reference2);
	}

	elseif reference1=="remindsound" {
		OnEventEditSet(temp[0],temp[1],temp[2],temp[3],temp[4],temp[5],reference2,temp[7])
	}

	elseif reference1=="eventapp" {
		OnEventEditSet(temp[0],temp[1],temp[2],temp[3],temp[4],temp[5],reference2,temp[7])
	}
}

//選擇音樂文件
//---------------------------------------------------
DialogMusicFile
{
	_file = _argv[0];
	_fileext = TOLOWER(SPLITPATH(_file)[3]);
	case _fileext {
		when ".mid", ".wav", ".mp3",  ".m4a",".au", ".ogg", ".wma",".ape",".flac",".avi",".wmv",".rm",".rmvb",".mp4",".mkv",".flv",".mpg" {
			MusicLoadFile(_file);
			DialogMusicSaveList(musiclistfile[0],1);
			OnMusicPlayerList;
		}
		others {
			"这不是音乐文件!\w9\w9\c";
			"抱歉，橘花打不开这个音乐文件……\w9\w9\c";
			--
			OnMusicPlayerList;
		}
	}
}

//選擇文件夾
//---------------------------------------------------
DialogMusicFolder
{
	MusicLoadFolder(_argv[0]);
	DialogMusicSaveList(musiclistfile[0],1);
	OnMusicPlayerList;
}

DialogLrcFolder
{
	lrcpath = _argv[0];
}

MusicLoadFile
{
	musiclist += REPLACE(_argv[0],'/','\')+"*";
	musicfile[0] ++;
}

MusicLoadFolder
{
	if fjswitch
		fjswitch="-1"
	FCHARSET(1);
	_path = _argv[0];
	_path=REPLACE(_path,'\\','\')
	_file = FENUM(_path);
	foreach _file; _f {
		_t = _path + _f;
		_fileext = TOLOWER(SPLITPATH(_t)[3]);
		_folder=0
		if FATTRIB(_t)[2] == 1
		{
			MusicLoadFolder(_t);
		}else{
			case _fileext {
				_t = _path +"/"+ _f;
				when ".mid", ".wav", ".mp3",  ".m4a", ".au", ".ogg", ".wma",".ape",".flac",".avi",".wmv",".rm",".rmvb",".mp4",".mkv",".flv",".mpg"{
					_t = REPLACE(_t,'/','\')
					_t = REPLACE(_t,'\\','\')
					musiclist += _t+"*";
					musicfile[0] ++;
				}
			}
		}
	}
}

//拖放音樂文件
//---------------------------------------------------
MusicFileDrop
{
	if fjswitch
		fjswitch="-1"
	_buff = _argv[0];
	foreach _buff; _ref {
		_fileext = TOLOWER(SPLITPATH(_ref)[3]);
		if FATTRIB(_ref)[2] == 1 {
			_n=STRLEN(_ref)
			_t=SUBSTR(_ref,0,_n-1);t=_t
			DialogMusicAddList(SPLITPATH(_t)[2]);
			MusicLoadFolder(_ref);
		}
		else {
			case _fileext {
				when ".mid", ".wav", ".mp3", ".m4a",".au", ".ogg", ".wma",".ape",".flac",".avi",".wmv",".rm",".rmvb",".mp4",".mkv",".flv",".mpg"{
					MusicLoadFile(_ref);
				}
				when ".m3u", ".m3u8" {
					DialogMusicOpenList(_ref);
				}
			}
		}
	}
	DialogMusicSaveList(musiclistfile[0],1);
	musicplayerlist=1
	OnMusicPlayerList;
}

OnFileDropEx
{

	if fjswitch
		fjswitch="-1"
	_file = reference0[0];
	_fileext = TOLOWER(SPLITPATH(_file)[3]);
	_filename = SPLITPATH(_file)[2] + _fileext;
	if eatfile==1
	{
		OnFileEatDrop(reference0)
	}elseif rename==1
		OnFileRenameDrop(reference0)
	elseif shortcut==1
		OnFileDrop2
	else{
		case _fileext {
			when ".m3u", ".m3u8", ".mid", ".wav", ".mp3", ".au", ".m4a", ".ogg", ".wma",".ape",".flac",".avi",".wmv",".rm",".rmvb",".mp4",".mkv",".flv",".mpg"
			{
				MusicFileDrop(reference0);
			}
			when ".exe",".lnk",".sccfg",""{
				OnFileDrop2
			}
			when ".png", ".jpg", ".jpeg", ".bmp"
			{
				Wallpaperfile = reference0
				"\1\s[11]\0\b[2]\s[2]图像文件\n\_q「%(_filename)」\n\n[half]\_q要把这个设定为壁纸吗？\n\n[half]/
				\![*]\q[居中,OnSetWallpaper,0]\n/
				\![*]\q[并列,OnSetWallpaper,1]\n/
				\![*]\q[放大,OnSetWallpaper,2]\n\n[half]/
				\q[◇Cancel,OnSetWallpaper,cancel]\e"
			}
			when ".txt"
			{
				OnOpenBook(reference0)
			}
			when ".rncfg"
			{
				DialogFilesRenameOpenCon(reference0);
			}
			when ".sccfg"
			{
				LoadShortCutCfg(reference0)
				OnShortcutMenu
			}
			when ".scdat"
			{
				OnShortCutMenuAdd(reference0)
			}
			others
			{
				"「%(_filename)」\n未知的文件类型……"
				"\1\s[11]未知文件\n\_q「%(_filename)」\_q\0\s[3]…这是什么？"
			}
		}
	}
}