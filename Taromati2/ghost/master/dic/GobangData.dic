
initdat
{
 initdat2;
 initdat3;
 initdat4;
 initdat5;
 initdat1;
 initdatAdd;
 }
/*_____________________________________________________________________________________*/

dat
 {

_m=TOINT(_argv[0]);
_x0=TOINT(_argv[1]);
_y0=TOINT(_argv[2]);
_c0=TOINT(_argv[3]);
_x1=TOINT(_argv[4]);
_y1=TOINT(_argv[5]);
_c1=TOINT(_argv[6]);
_x2=TOINT(_argv[7]);
_y2=TOINT(_argv[8]);
_c2=TOINT(_argv[9]);
_x3=TOINT(_argv[10]);
_y3=TOINT(_argv[11]);
_c3=TOINT(_argv[12]);
_x4=TOINT(_argv[13]);
_y4=TOINT(_argv[14]);
_c4=TOINT(_argv[15]);
_x5=TOINT(_argv[16]);
_y5=TOINT(_argv[17]);
_c5=TOINT(_argv[18]);
_x6=TOINT(_argv[19]);
_y6=TOINT(_argv[20]);
_c6=TOINT(_argv[21]);


 row.x[_m*7+0]=_x0;  row.y[_m*7+0]=_y0; row.c[_m*7+0]=_c0;
 row.x[_m*7+1]=_x1;  row.y[_m*7+1]=_y1; row.c[_m*7+1]=_c1;
 row.x[_m*7+2]=_x2;  row.y[_m*7+2]=_y2; row.c[_m*7+2]=_c2;
 row.x[_m*7+3]=_x3;  row.y[_m*7+3]=_y3; row.c[_m*7+3]=_c3;
 row.x[_m*7+4]=_x4;  row.y[_m*7+4]=_y4; row.c[_m*7+4]=_c4;
 row.x[_m*7+5]=_x5;  row.y[_m*7+5]=_y5; row.c[_m*7+5]=_c5;
 row.x[_m*7+6]=_x6;  row.y[_m*7+6]=_y6; row.c[_m*7+6]=_c6;



 }
/*_____________________________________________________________________________________*/

initdat1
{
/* grade 1 */
dat(0,1,0,1,2,0,1,3,0,1,4,0,1,20,1000,0,0,0,0,0,0,0);
dat(1,-1,0,1,-2,0,1,-3,0,1,-4,0,1,20,1000,0,0,0,0,0,0,0);
dat(2,-1,0,1,1,0,1,2,0,1,3,0,1,20,1000,0,0,0,0,0,0,0);
dat(3,-1,0,1,-2,0,1,-3,0,1,1,0,1,20,1000,0,0,0,0,0,0,0);
dat(4,-1,0,1,-2,0,1,1,0,1,2,0,1,20,1000,0,0,0,0,0,0,0);
dat(5,0,1,1,0,2,1,0,3,1,0,4,1,20,1000,0,0,0,0,0,0,0);
dat(6,0,-1,1,0,-2,1,0,-3,1,0,-4,1,20,1000,0,0,0,0,0,0,0);
dat(7,0,-1,1,0,1,1,0,2,1,0,3,1,20,1000,0,0,0,0,0,0,0);
dat(8,0,-1,1,0,-2,1,0,-3,1,0,1,1,20,1000,0,0,0,0,0,0,0);
dat(9,0,-1,1,0,-2,1,0,1,1,0,2,1,20,1000,0,0,0,0,0,0,0);
dat(10,1,1,1,2,2,1,3,3,1,4,4,1,20,1000,0,0,0,0,0,0,0);
dat(11,-1,-1,1,-2,-2,1,-3,-3,1,-4,-4,1,20,1000,0,0,0,0,0,0,0);
dat(12,-1,-1,1,1,1,1,2,2,1,3,3,1,20,1000,0,0,0,0,0,0,0);
dat(13,-1,-1,1,-2,-2,1,-3,-3,1,1,1,1,20,1000,0,0,0,0,0,0,0);
dat(14,-1,-1,1,-2,-2,1,1,1,1,2,2,1,20,1000,0,0,0,0,0,0,0);
dat(15,1,-1,1,2,-2,1,3,-3,1,4,-4,1,20,1000,0,0,0,0,0,0,0);
dat(16,-1,1,1,-2,2,1,-3,3,1,-4,4,1,20,1000,0,0,0,0,0,0,0);
dat(17,-1,1,1,1,-1,1,2,-2,1,3,-3,1,20,1000,0,0,0,0,0,0,0);
dat(18,-1,1,1,-2,2,1,-3,3,1,1,-1,1,20,1000,0,0,0,0,0,0,0);
dat(19,-1,1,1,-2,2,1,1,-1,1,2,-2,1,20,1000,0,0,0,0,0,0,0);
}
/*_____________________________________________________________________________________*/

initdat2
/* grade 2 */
{
dat(20,-1,0,-1,1,0,1,2,0,1,3,0,1,4,0,-1,20,100,0,0,0,0);
dat(21,1,0,-1,-1,0,1,-2,0,1,-3,0,1,-4,0,-1,20,100,0,0,0,0);
dat(22,1,0,1,2,0,-1,-1,0,1,-2,0,1,-3,0,-1,20,100,0,0,0,0);
dat(23,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(24,0,-1,-1,0,1,1,0,2,1,0,3,1,0,4,-1,20,100,0,0,0,0);
dat(25,0,1,-1,0,-1,1,0,-2,1,0,-3,1,0,-4,-1,20,100,0,0,0,0);
dat(26,0,1,1,0,2,-1,0,-1,1,0,-2,1,0,-3,-1,20,100,0,0,0,0);
dat(27,0,1,1,0,2,1,0,3,-1,0,-1,1,0,-2,-1,20,100,0,0,0,0);
dat(28,-1,-1,-1,1,1,1,2,2,1,3,3,1,4,4,-1,20,100,0,0,0,0);
dat(29,1,1,-1,-1,-1,1,-2,-2,1,-3,-3,1,-4,-4,-1,20,100,0,0,0,0);
dat(30,1,1,1,2,2,-1,-1,-1,1,-2,-2,1,-3,-3,-1,20,100,0,0,0,0);
dat(31,1,1,1,2,2,1,3,3,-1,-1,-1,1,-2,-2,-1,20,100,0,0,0,0);
dat(32,-1,1,-1,1,-1,1,2,-2,1,3,-3,1,4,-4,-1,20,100,0,0,0,0);
dat(33,1,-1,-1,-1,1,1,-2,2,1,-3,3,1,-4,4,-1,20,100,0,0,0,0);
dat(34,1,-1,1,2,-2,-1,-1,1,1,-2,2,1,-3,3,-1,20,100,0,0,0,0);
dat(35,1,-1,1,2,-2,1,3,-3,-1,-1,1,1,-2,2,-1,20,100,0,0,0,0);
dat(36,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(37,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(38,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(39,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(40,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(41,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(42,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(43,1,0,1,2,0,1,3,0,-1,-1,0,1,-2,0,-1,20,100,0,0,0,0);
dat(44,-1,0,1,-2,0,-1,-3,0,1,1,0,1,2,0,-1,3,0,1,20,100,0);
dat(45,0,-1,1,0,-2,-1,0,-3,1,0,1,1,0,2,-1,0,3,1,20,100,0);
dat(46,1,1,1,2,2,-1,3,3,1,-1,-1,1,-2,-2,-1,-3,-3,1,20,100,0);
dat(47,1,-1,1,2,-2,-1,3,-3,1,-1,1,1,-2,2,-1,-3,3,1,20,100,0);
}
/*_____________________________________________________________________________________*/

initdat3
{
/*  grade 3 */

dat(48,-100,0,-1,-2,0,1,-3,0,1,-4,0,1,-5,0,0,20,9,0,0,0,0);
dat(49,100,0,-1,2,0,1,3,0,1,4,0,1,5,0,0,20,9,0,0,0,0);
dat(50,100,-1,-1,0,-2,1,0,-3,1,0,-4,1,0,-5,0,20,9,0,0,0,0);
dat(51,100,1,-1,0,2,1,0,3,1,0,4,1,0,5,0,20,9,0,0,0,0);
dat(52,-1, 0,-1,  1, 0, 1,  2, 0, 1,  3, 0,-1, 20,10, 0, 0,0,0, 0,0,0);
dat(53, 1, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0,-1, 20,10, 0, 0,0,0, 0,0,0);
dat(54,-1, 0,-1,  1, 0, 1,  2, 0,-1,  3, 0, 1,  4, 0,-1, 20,9, 0, 0,0,0);
dat(55, 1, 0,-1, -1, 0, 1, -2, 0,-1, -3, 0, 1, -4, 0,-1, 20,9, 0, 0,0,0);
dat(56, 1, 0, 1,  2, 0,-1, -1, 0, 1, -2, 0,-1, 20,10, 0, 0,0,0, 0,0,0);
dat(57,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0,-1, 20,9, 0, 0,0,0);
dat(58, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 1, -4, 0,-1, 20,9, 0, 0,0,0);
dat(59, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20,10, 0, 0,0,0);
dat(60, 1, 0,-1,  2, 0, 1,  3, 0,-1, -1, 0, 1, -2, 0,-1, 20,10, 0, 0,0,0);
dat(61,-1, 0,-1,  1, 0, 1,  2, 0, 1,  3, 0, 1,  4, 0, 0, 20,14, 0, 0,0,0);
dat(62,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0, 1,  5, 0,-1, 20,14, 0);
dat(63,-1, 0, 1, -2, 0,-1,  1, 0, 1,  2, 0, 1,  3, 0, 0, 20,14, 0, 0,0,0);
dat(64, 1, 0, 1,  2, 0,-1,  3, 0, 1,  4, 0, 1,  5, 0, 0, 20,14, 0, 0,0,0);
dat(65, 1, 0, 1,  2, 0, 0, -1, 0, 1, -2, 0, 1, -3, 0,-1, 20,14, 0, 0,0,0);
dat(66, 1, 0, 1,  2, 0, 0, -1, 0,-1, -2, 0, 1, -3, 0, 1, -4, 0,-1, 20,14, 0);
dat(67, 1, 0,-1,  2, 0, 1,  3, 0, 0, -1, 0, 1, -2, 0, 1, -3, 0,-1, 20,14, 0);
dat(68, 1, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 1, -4, 0, 0, 20,14, 0, 0,0,0);
dat(69,1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 1, -4, 0, 1, -5, 0, 0, 20,14, 0);
dat(70, 1, 0, 1,  2, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 0, 20,14, 0, 0,0,0);
dat(71,-1, 0, 1, -2, 0,-1, -3, 0, 1, -4, 0, 1, -5, 0, 0, 20,14, 0, 0,0,0);
dat(72, 1, 0, 1,  2, 0, 1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20,14, 0, 0,0,0);
dat(73, 1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0,-1, -1, 0, 1, -2, 0, 0, 20,14, 0);
dat(74, 1, 0, 1,  2, 0, 1,  3, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 0, 20,14, 0);
dat(75, 0,-1,-1,  0, 1, 1,  0, 2, 1,  0, 3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(76, 0, 1,-1,  0,-1, 1,  0,-2, 1,  0,-3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(77, 0,-1,-1,  0, 1, 1,  0, 2,-1,  0, 3, 1,  0, 4,-1, 20,9, 0, 0,0,0);
dat(78, 0, 1,-1,  0,-1, 1,  0,-2,-1,  0,-3, 1,  0,-4,-1, 20,9, 0, 0,0,0);
dat(79, 0, 1, 1,  0, 2,-1,  0,-1, 1,  0,-2,-1, 20,10, 0,0,0,0, 0,0,0);
dat(80, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4,-1, 20,9, 0, 0,0,0);
dat(81, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3, 1,  0,-4,-1, 20,9, 0, 0,0,0);
dat(82, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20,10, 0, 0,0,0);
dat(83, 0, 1,-1,  0, 2, 1,  0, 3,-1,  0,-1, 1,  0,-2,-1, 20,10, 0, 0,0,0);
dat(84, 0,-1,-1,  0, 1, 1,  0, 2, 1,  0, 3, 1,  0, 4, 0, 20,14, 0, 0,0,0);
dat(85, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4, 1,  0, 5,-1, 20,14, 0);
dat(86, 0,-1, 1,  0,-2,-1,  0, 1, 1,  0, 2, 1,  0, 3, 0, 20,14, 0, 0,0,0);
dat(87, 0, 1, 1,  0, 2,-1,  0, 3, 1,  0, 4, 1,  0, 5, 0, 20,14, 0, 0,0,0);
dat(88, 0, 1, 1,  0, 2, 0,  0,-1, 1,  0,-2, 1,  0,-3,-1, 20,14, 0, 0,0,0);
dat(89, 0, 1, 1,  0, 2, 0,  0,-1,-1,  0,-2, 1,  0,-3, 1,  0,-4,-1, 20,14, 0);
dat(90, 0, 1,-1,  0, 2, 1,  0, 3, 0,  0,-1, 1,  0,-2, 1,  0,-3,-1, 20,14, 0);
dat(91, 0, 1,-1,  0,-1, 1,  0,-2, 1,  0,-3, 1,  0,-4, 0, 20,14, 0, 0,0,0);
dat(92, 0,1,-1,  0,-1,-1,  0,-2, 1,  0,-3, 1,  0,-4, 1,  0,-5, 0, 20,14, 0);
dat(93, 0, 1, 1,  0, 2,-1,  0,-1, 1,  0,-2, 1,  0,-3, 0, 20,14, 0, 0,0,0);
dat(94, 0,-1, 1,  0,-2,-1,  0,-3, 1,  0,-4, 1,  0,-5, 0, 20,14, 0, 0,0,0);
dat(95, 0, 1, 1,  0, 2, 1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20,14, 0, 0,0,0);
dat(96, 0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4,-1,  0,-1, 1,  0,-2, 0, 20,14, 0);
dat(97, 0, 1, 1,  0, 2, 1,  0, 3,-1,  0,-1,-1,  0,-2, 1,  0,-3, 0, 20,14, 0);
dat(98, -1,-1,-1,  1, 1, 1,  2, 2, 1,  3, 3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(99, 1, 1,-1, -1,-1, 1, -2,-2, 1, -3,-3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(100,-1,-1,-1,  1, 1, 1,  2, 2,-1,  3, 3, 1,  4, 4,-1, 20,9, 0, 0,0,0);
dat(101, 1, 1,-1, -1,-1, 1, -2,-2,-1, -3,-3, 1, -4,-4,-1, 20,9, 0, 0,0,0);
dat(102, 1, 1, 1,  2, 2,-1, -1,-1, 1, -2,-2,-1, 20,10, 0,0,0,0, 0,0,0);
dat(103,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4,-1, 20,9, 0, 0,0,0);
dat(104, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3, 1, -4,-4,-1, 20,9, 0, 0,0,0);
dat(105, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20,10, 0, 0,0,0);
dat(106, 1, 1,-1,  2, 2, 1,  3, 3,-1, -1,-1, 1, -2,-2,-1, 20,10, 0, 0,0,0);
dat(107,-1,-1,-1,  1, 1, 1,  2, 2, 1,  3, 3, 1,  4, 4, 0, 20,14, 0, 0,0,0);
dat(108,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4, 1,  5, 5,-1, 20,14, 0);
dat(109,-1,-1, 1, -2,-2,-1,  1, 1, 1,  2, 2, 1,  3, 3, 0, 20,14, 0, 0,0,0);
dat(110, 1, 1, 1,  2, 2,-1,  3, 3, 1,  4, 4, 1,  5, 5, 0, 20,14, 0, 0,0,0);
dat(111, 1, 1, 1,  2, 2, 0, -1,-1, 1, -2,-2, 1, -3,-3,-1, 20,14, 0, 0,0,0);
dat(112, 1, 1, 1,  2, 2, 0, -1,-1,-1, -2,-2, 1, -3,-3, 1, -4,-4,-1, 20,14, 0);
dat(113, 1, 1,-1,  2, 2, 1,  3, 3, 0, -1,-1, 1, -2,-2, 1, -3,-3,-1, 20,14, 0);
dat(114, 1, 1,-1, -1,-1, 1, -2,-2, 1, -3,-3, 1, -4,-4, 0, 20,14, 0, 0,0,0);
dat(115,1,1,-1, -1,-1,-1, -2,-2, 1, -3,-3, 1, -4,-4, 1, -5,-5, 0, 20,14, 0);
dat(116, 1, 1, 1,  2, 2,-1, -1,-1, 1, -2,-2, 1, -3,-3, 0, 20,14, 0, 0,0,0);
dat(117,-1,-1, 1, -2,-2,-1, -3,-3, 1, -4,-4, 1, -5,-5, 0, 20,14, 0, 0,0,0);
dat(118, 1, 1, 1,  2, 2, 1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20,14, 0, 0,0,0);
dat(119, 1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4,-1, -1,-1, 1, -2,-2, 0, 20,14, 0);
dat(120, 1, 1, 1,  2, 2, 1,  3, 3,-1, -1,-1,-1, -2,-2, 1, -3,-3, 0, 20,14, 0);
dat(121,-1, 1,-1,  1,-1, 1,  2,-2, 1,  3,-3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(122, 1,-1,-1, -1, 1, 1, -2, 2, 1, -3, 3,-1, 20,10, 0,0,0,0, 0,0,0);
dat(123,-1, 1,-1,  1,-1, 1,  2,-2,-1,  3,-3, 1,  4,-4,-1, 20,9, 0, 0,0,0);
dat(124, 1,-1,-1, -1, 1, 1, -2, 2,-1, -3, 3, 1, -4, 4,-1, 20,9, 0, 0,0,0);
dat(125, 1,-1, 1,  2,-2,-1, -1, 1, 1, -2, 2,-1, 20,10, 0,0,0,0, 0,0,0);
dat(126,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4,-1, 20,9, 0, 0,0,0);
dat(127, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3, 1, -4, 4,-1, 20,9, 0, 0,0,0);
dat(128, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20,10, 0, 0,0,0);
dat(129, 1,-1,-1,  2,-2, 1,  3,-3,-1, -1, 1, 1, -2, 2,-1, 20,10, 0, 0,0,0);
dat(130,-1, 1,-1,  1,-1, 1,  2,-2, 1,  3,-3, 1,  4,-4, 0, 20,14, 0, 0,0,0);
dat(131, -1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4, 1,  5,-5,-1, 20,14, 0);
dat(132,-1, 1, 1, -2, 2,-1,  1,-1, 1,  2,-2, 1,  3,-3, 0, 20,14, 0, 0,0,0);
dat(133, 1,-1, 1,  2,-2,-1,  3,-3, 1,  4,-4, 1,  5,-5, 0, 20,14, 0, 0,0,0);
dat(134, 1,-1, 1,  2,-2, 0, -1, 1, 1, -2, 2, 1, -3, 3,-1, 20,14, 0, 0,0,0);
dat(135, 1,-1, 1,  2,-2, 0, -1, 1,-1, -2, 2, 1, -3, 3, 1, -4, 4,-1, 20,14, 0);
dat(136, 1,-1,-1,  2,-2, 1,  3,-3, 0, -1, 1, 1, -2, 2, 1, -3, 3,-1, 20,14, 0);
dat(137, 1,-1,-1, -1, 1, 1, -2, 2, 1, -3, 3, 1, -4, 4, 0, 20,14, 0, 0,0,0);
dat(138,1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3, 1, -4, 4, 1, -5, 5, 0, 20,14, 0);
dat(139, 1,-1, 1,  2,-2,-1, -1, 1, 1, -2, 2, 1, -3, 3, 0, 20,14, 0, 0,0,0);
dat(140,-1, 1, 1, -2, 2,-1, -3, 3, 1, -4, 4, 1, -5, 5, 0, 20,14, 0, 0,0,0);
dat(141, 1,-1, 1,  2,-2, 1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20,14, 0, 0,0,0);
dat(142, 1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4,-1, -1, 1, 1, -2, 2, 0, 20,14, 0);
dat(143, 1,-1, 1,  2,-2, 1,  3,-3,-1, -1, 1,-1, -2, 2, 1, -3, 3, 0, 20,14, 0);
}
/*_____________________________________________________________________________________*/

initdat4
{
/* grade 4 */
dat(144,-1, 0,-1,  1, 0, 1,  2, 0,-1,  3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(145,-1, 0, 1, -2, 0,-1,  1, 0,-1,  2, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(146,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(147, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(148,-1, 0,-1, -2, 0,-1,  1, 0, 1,  2, 0, 1,  3, 0, 0, 20, 1, 0,0,0,0);
dat(149,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0, 0, 20, 1, 0,0,0,0);
dat(150,-1, 0, 1, -2, 0,-1, -3, 0,-1,  1, 0, 1,  2, 0, 0, 20, 1, 0,0,0,0);
dat(151,-1, 0,-1, -2, 0, 1, -3, 0,-1,  1, 0, 1,  2, 0, 0, 20, 1, 0,0,0,0);
dat(152,-1, 0, 1, -2, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 0, 20, 1, 0,0,0,0);
dat(153, 1, 0,-1,  2, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 0, 20, 1, 0,0,0,0);
dat(154, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 1, -4, 0, 0, 20, 1, 0,0,0,0);
dat(155, 1, 0, 1,  2, 0,-1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 1, 0,0,0,0);
dat(156, 1, 0,-1,  2, 0, 1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 1, 0,0,0,0);
dat(157, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 0, 20, 1, 0,0,0,0);
dat(158,-1, 0,-1, -2, 0,-1,  1, 0, 1,  2, 0,-1, 20, 1, 0,0,0,0,0,0,0);
dat(159, 1, 0,-1, -1, 0, 1, -2, 0,-1, -3, 0,-1, 20, 1, 0,0,0,0,0,0,0);
dat(160,-1,0,-1,  1, 0,-1,  2, 0,-1,  3, 0, 1,  4, 0,-1, 20, 1, 0,0,0,0);
dat(161, 1, 0,-1, -1, 0,-1, -2, 0,-1, -3, 0, 1, -4, 0,-1, 20, 1, 0,0,0,0);
dat(162, 0,-1,-1,  0, 1, 1,  0, 2,-1,  0, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(163, 0,-1, 1,  0,-2,-1,  0, 1,-1,  0, 2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(164, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(165, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(166, 0,-1,-1,  0,-2,-1,  0, 1, 1,  0, 2, 1,  0, 3, 0, 20, 1, 0,0,0,0);
dat(167, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4, 0, 20, 1, 0,0,0,0);
dat(168, 0,-1, 1,  0,-2,-1,  0,-3,-1,  0, 1, 1,  0, 2, 0, 20, 1, 0,0,0,0);
dat(169, 0,-1,-1,  0,-2, 1,  0,-3,-1,  0, 1, 1,  0, 2, 0, 20, 1, 0,0,0,0);
dat(170, 0,-1, 1,  0,-2,-1,  0, 1,-1,  0, 2, 1,  0, 3, 0, 20, 1, 0,0,0,0);
dat(171, 0, 1,-1,  0, 2,-1,  0,-1, 1,  0,-2, 1,  0,-3, 0, 20, 1, 0,0,0,0);
dat(171, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3, 1,  0,-4, 0, 20, 1, 0,0,0,0);
dat(173, 0, 1, 1,  0, 2,-1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 1, 0,0,0,0);
dat(174, 0, 1,-1,  0, 2, 1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 1, 0,0,0,0);
dat(175, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2, 1,  0,-3, 0, 20, 1, 0,0,0,0);
dat(176, 0,-1,-1,  0,-2,-1,  0, 1, 1,  0, 2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(177, 0, 1,-1,  0,-1, 1,  0,-2,-1,  0,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(178, 0,-1,-1,  0, 1,-1,  0, 2,-1,  0, 3, 1,  0, 4,-1, 20, 1, 0,0,0,0);
dat(179, 0, 1,-1,  0,-1,-1,  0,-2,-1,  0,-3, 1,  0,-4,-1, 20, 1, 0,0,0,0);
dat(180,-1,-1,-1,  1, 1, 1,  2, 2,-1,  3, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(181,-1,-1, 1, -2,-2,-1,  1, 1,-1,  2, 2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(182,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(183, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(184,-1,-1,-1, -2,-2,-1,  1, 1, 1,  2, 2, 1,  3, 3, 0, 20, 1, 0,0,0,0);
dat(185,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4, 0, 20, 1, 0,0,0,0);
dat(186,-1,-1, 1, -2,-2,-1, -3,-3,-1,  1, 1, 1,  2, 2, 0, 20, 1, 0,0,0,0);
dat(187,-1,-1,-1, -2,-2, 1, -3,-3,-1,  1, 1, 1,  2, 2, 0, 20, 1, 0,0,0,0);
dat(188,-1,-1, 1, -2,-2,-1,  1, 1,-1,  2, 2, 1,  3, 3, 0, 20, 1, 0,0,0,0);
dat(189, 1, 1,-1,  2, 2,-1, -1,-1, 1, -2,-2, 1, -3,-3, 0, 20, 1, 0,0,0,0);
dat(190, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3, 1, -4,-4, 0, 20, 1, 0,0,0,0);
dat(191, 1, 1, 1,  2, 2,-1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 1, 0,0,0,0);
dat(192, 1, 1,-1,  2, 2, 1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 1, 0,0,0,0);
dat(193, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2, 1, -3,-3, 0, 20, 1, 0,0,0,0);
dat(194,-1,-1,-1, -2,-2,-1,  1, 1, 1,  2, 2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(195, 1, 1,-1, -1,-1, 1, -2,-2,-1, -3,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(196,-1,-1,-1,  1, 1,-1,  2, 2,-1,  3, 3, 1,  4, 4,-1, 20, 1, 0,0,0,0);
dat(197, 1, 1,-1, -1,-1,-1, -2,-2,-1, -3,-3, 1, -4,-4,-1, 20, 1, 0,0,0,0);
dat(198,-1, 1,-1,  1,-1, 1,  2,-2,-1,  3,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(199,-1, 1, 1, -2, 2,-1,  1,-1,-1,  2,-2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(200, -1,1,-1,  1,-1,-1,  2,-2, 1,  3,-3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(201, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(202,-1, 1,-1, -2, 2,-1,  1,-1, 1,  2,-2, 1,  3,-3, 0, 20, 1, 0,0,0,0);
dat(203,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4, 0, 20, 1, 0,0,0,0);
dat(204,-1, 1, 1, -2, 2,-1, -3, 3,-1,  1,-1, 1,  2,-2, 0, 20, 1, 0,0,0,0);
dat(205,-1, 1,-1, -2, 2, 1, -3, 3,-1,  1,-1, 1,  2,-2, 0, 20, 1, 0,0,0,0);
dat(206,-1, 1, 1, -2, 2,-1,  1,-1,-1,  2,-2, 1,  3,-3, 0, 20, 1, 0,0,0,0);
dat(207, 1,-1,-1,  2,-2,-1, -1, 1, 1, -2, 2, 1, -3, 3, 0, 20, 1, 0,0,0,0);
dat(208,1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3, 1, -4, 4, 0, 20, 1, 0, 0,0,0);
dat(209, 1,-1, 1,  2,-2,-1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 1, 0,0,0,0);
dat(210, 1,-1,-1,  2,-2, 1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 1, 0,0,0,0);
dat(211, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3, 0, 20, 1, 0,0,0,0);
dat(212,-1, 1,-1, -2, 2,-1,  1,-1, 1,  2,-2,-1, 20, 1, 0,0,0,0,0,0,0);
dat(213, 1,-1,-1, -1, 1, 1, -2, 2,-1, -3, 3,-1, 20, 1, 0,0,0,0,0,0,0);
dat(214,-1, 1,-1,  1,-1,-1,  2,-2,-1,  3,-3, 1,  4,-4,-1, 20, 1, 0,0,0,0);
dat(215, 1,-1,-1, -1, 1,-1, -2, 2,-1, -3, 3, 1, -4, 4,-1, 20, 1, 0,0,0,0);
}
/*_____________________________________________________________________________________*/

initdat5
{
/* grade 5 */
dat(216,-1, 0,-1,  1, 0, 1,  2, 0,-1,  3, 0,-1, 20, 2, 0, 0,0,0, 0,0,0);
dat(217, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(218, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0,-1, 20,-1, 0, 0,0,0, 0,0,0);
dat(219, 1, 0,-1, -1, 0, 1, -2, 0,-1, -3, 0,-1, 20,-2, 0, 0,0,0, 0,0,0);
dat(220,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(221,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(222, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20,-1, 0, 0,0,0, 0,0,0);
dat(223, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20, 1, 0, 0,0,0, 0,0,0);
dat(224,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0, 0, 20, 1, 0, 0,0,0);
dat(225,-1, 0,-1, -2, 0,-1,  1, 0, 1,  2, 0, 1,  3, 0, 0, 20, -1, 0, 0,0,0);
dat(226,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0, 0, 20, 1, 0, 0,0,0);
dat(227,-1, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 1,  4, 0, 0, 20,-1, 0, 0,0,0);
dat(228, 1, 0, 1,  2, 0, 0, -1, 0, 1, -2, 0,-1, -3, 0,-1, 20,-2, 0, 0,0,0);
dat(229, 1, 0, 1,  2, 0, 0, -1, 0, 1, -2, 0,-1, -3, 0,-1, 20,-3, 0, 0,0,0);
dat(230,-1, 0,-1, -2, 0, 1, -3, 0,-1,  1, 0, 1,  2, 0, 0, 20,-1, 0, 0,0,0);
dat(231,-1, 0,-1, -2, 0, 1, -3, 0,-1,  1, 0, 1,  2, 0, 0, 20,-3, 0, 0,0,0);
dat(232,-1, 0, 1, -2, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 0, 20, 1, 0, 0,0,0);
dat(233,-1, 0, 1, -2, 0,-1,  1, 0,-1,  2, 0, 1,  3, 0, 0, 20,-2, 0, 0,0,0);
dat(234, 1, 0,-1,  2, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 0, 20, 1, 0, 0,0,0);
dat(235, 1, 0,-1,  2, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 0, 20, 2, 0, 0,0,0);
dat(236, 1, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 1, -4, 0, 0, 20,-1, 0, 0,0,0);
dat(237, 1, 0,-1,  2, 0,-1, -1, 0, 1, -2, 0, 1, -3, 0, 0, 20, 2, 0, 0,0,0);
dat(238, 1, 0, 1,  2, 0,-1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 2, 0, 0,0,0);
dat(239, 1, 0, 1,  2, 0,-1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 3, 0, 0,0,0);
dat(240, 1, 0,-1,  2, 0, 1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 1, 0, 0,0,0);
dat(241, 1, 0,-1,  2, 0, 1,  3, 0,-1, -1, 0, 1, -2, 0, 0, 20, 3, 0, 0,0,0);
dat(242, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 0, 20,-1, 0, 0,0,0);
dat(243, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0, 0, 20, 2, 0, 0,0,0);
dat(244, 1, 0, 1,  2, 0,-1, -1, 0,-1, -2, 0, 1, -3, 0,-1, 20, 2, 0, 0,0,0);
dat(245, 0,-1,-1,  0, 1, 1,  0, 2,-1,  0, 3,-1, 20, 0, 2, 0,0,0, 0,0,0);
dat(246, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20, 0, 1, 0,0,0, 0,0,0);
dat(247, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2,-1, 20, 0,-1, 0,0,0, 0,0,0);
dat(248, 0, 1,-1,  0,-1, 1,  0,-2,-1,  0,-3,-1, 20, 0,-2, 0,0,0, 0,0,0);
dat(249, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3,-1, 20, 0, 1, 0,0,0, 0,0,0);
dat(250, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3,-1, 20, 0, 1, 0,0,0, 0,0,0);
dat(251, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20, 0,-1, 0,0,0, 0,0,0);
dat(252, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20, 0, 1, 0,0,0, 0,0,0);
dat(253, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4, 0, 20, 0, 1, 0,0,0);
dat(254, 0,-1,-1,  0,-2,-1,  0, 1, 1,  0, 2, 1,  0, 3, 0, 20, 0, -1, 0,0,0);
dat(255, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4, 0, 20, 0, 1, 0,0,0);
dat(256, 0,-1,-1,  0, 1,-1,  0, 2, 1,  0, 3, 1,  0, 4, 0, 20, 0,-1, 0,0,0);
dat(257, 0, 1, 1,  0, 2, 0,  0,-1, 1,  0,-2,-1,  0,-3,-1, 20, 0,-2, 0,0,0);
dat(258, 0, 1, 1,  0, 2, 0,  0,-1, 1,  0,-2,-1,  0,-3,-1, 20, 0,-3, 0,0,0);
dat(259, 0,-1,-1,  0,-2, 1,  0,-3,-1,  0, 1, 1,  0, 2, 0, 20, 0,-1, 0,0,0);
dat(260, 0,-1,-1,  0,-2, 1,  0,-3,-1,  0, 1, 1,  0, 2, 0, 20, 0,-3, 0,0,0);
dat(261, 0,-1, 1,  0,-2,-1,  0, 1,-1,  0, 2, 1,  0, 3, 0, 20, 0, 1, 0,0,0);
dat(262, 0,-1, 1,  0,-2,-1,  0, 1,-1,  0, 2, 1,  0, 3, 0, 20, 0,-2, 0,0,0);
dat(263, 0, 1,-1,  0, 2,-1,  0,-1, 1,  0,-2, 1,  0,-3, 0, 20, 0, 1, 0,0,0);
dat(264, 0, 1,-1,  0, 2,-1,  0,-1, 1,  0,-2, 1,  0,-3, 0, 20, 0, 2, 0,0,0);
dat(265, 0, 1,-1,  0,-1,-1,  0,-2, 1,  0,-3, 1,  0,-4, 0, 20, 0,-1, 0,0,0);
dat(266, 0, 1,-1,  0, 2,-1,  0,-1, 1,  0,-2, 1,  0,-3, 0, 20, 0, 2, 0,0,0);
dat(267, 0, 1, 1,  0, 2,-1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 0, 2, 0,0,0);
dat(268, 0, 1, 1,  0, 2,-1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 0, 3, 0,0,0);
dat(269, 0, 1,-1,  0, 2, 1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 0, 1, 0,0,0);
dat(270, 0, 1,-1,  0, 2, 1,  0, 3,-1,  0,-1, 1,  0,-2, 0, 20, 0, 3, 0,0,0);
dat(271, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2, 1,  0,-3, 0, 20, 0,-1, 0,0,0);
dat(272, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2, 1,  0,-3, 0, 20, 0, 2, 0,0,0);
dat(273, 0, 1, 1,  0, 2,-1,  0,-1,-1,  0,-2, 1,  0,-3,-1, 20, 0, 2, 0,0,0);
dat(274,-1,-1,-1,  1, 1, 1,  2, 2,-1,  3, 3,-1, 20, 2, 2, 0,0,0, 0,0,0);
dat(275, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20, 1, 1, 0,0,0, 0,0,0);
dat(276, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2,-1, 20,-1,-1, 0,0,0, 0,0,0);
dat(277, 1, 1,-1, -1,-1, 1, -2,-2,-1, -3,-3,-1, 20,-2,-2, 0,0,0, 0,0,0);
dat(278,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3,-1, 20, 1, 1, 0,0,0, 0,0,0);
dat(279,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3,-1, 20, 1, 1, 0,0,0, 0,0,0);
dat(280, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20,-1,-1, 0,0,0, 0,0,0);
dat(281, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20, 1, 1, 0,0,0, 0,0,0);
dat(282,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4, 0, 20, 1, 1, 0,0,0);
dat(283,-1,-1,-1, -2,-2,-1,  1, 1, 1,  2, 2, 1,  3, 3, 0, 20, -1,- 1, 0,0,0);
dat(284,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4, 0, 20, 1, 1, 0,0,0);
dat(285,-1,-1,-1,  1, 1,-1,  2, 2, 1,  3, 3, 1,  4, 4, 0, 20,-1,-1, 0,0,0);
dat(286, 1, 1, 1,  2, 2, 0, -1,-1, 1, -2,-2,-1, -3,-3,-1, 20,-2,-2, 0,0,0);
dat(287, 1, 1, 1,  2, 2, 0, -1,-1, 1, -2,-2,-1, -3,-3,-1, 20,-3,-3, 0,0,0);
dat(288,-1,-1,-1, -2,-2, 1, -3,-3,-1,  1, 1, 1,  2, 2, 0, 20,-1,-1, 0,0,0);
dat(289,-1,-1,-1, -2,-2, 1, -3,-3,-1,  1, 1, 1,  2, 2, 0, 20,-3,-3, 0,0,0);
dat(290,-1,-1, 1, -2,-2,-1,  1, 1,-1,  2, 2, 1,  3, 3, 0, 20, 1, 1, 0,0,0);
dat(291,-1,-1, 1, -2,-2,-1,  1, 1,-1,  2, 2, 1,  3, 3, 0, 20,-2,-2, 0,0,0);
dat(292, 1, 1,-1,  2, 2,-1, -1,-1, 1, -2,-2, 1, -3,-3, 0, 20, 1, 1, 0,0,0);
dat(293, 1, 1,-1,  2, 2,-1, -1,-1, 1, -2,-2, 1, -3,-3, 0, 20, 2, 2, 0,0,0);
dat(294, 1, 1,-1, -1,-1,-1, -2,-2, 1, -3,-3, 1, -4,-4, 0, 20,-1,-1, 0,0,0);
dat(295, 1, 1,-1,  2, 2,-1, -1,-1, 1, -2,-2, 1, -3,-3, 0, 20, 2, 2, 0,0,0);
dat(296, 1, 1, 1,  2, 2,-1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 2, 2, 0,0,0);
dat(297, 1, 1, 1,  2, 2,-1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 3, 3, 0,0,0);
dat(298, 1, 1,-1,  2, 2, 1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 1, 1, 0,0,0);
dat(299, 1, 1,-1,  2, 2, 1,  3, 3,-1, -1,-1, 1, -2,-2, 0, 20, 3, 3, 0,0,0);
dat(300, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2, 1, -3,-3, 0, 20,-1,-1, 0,0,0);
dat(301, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2, 1, -3,-3, 0, 20, 2, 2, 0,0,0);
dat(302, 1, 1, 1,  2, 2,-1, -1,-1,-1, -2,-2, 1, -3,-3,-1, 20, 2, 2, 0,0,0);
dat(303,-1, 1,-1,  1,-1, 1,  2,-2,-1,  3,-3,-1, 20, 2,-2, 0,0,0, 0,0,0);
dat(304, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 1,-1, 0,0,0, 0,0,0);
dat(305, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2,-1, 20,-1, 1, 0,0,0, 0,0,0);
dat(306, 1,-1,-1, -1, 1, 1, -2, 2,-1, -3, 3,-1, 20,-2, 2, 0,0,0, 0,0,0);
dat(307,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3,-1, 20, 1,-1, 0,0,0, 0,0,0);
dat(308,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3,-1, 20, 1,-1, 0,0,0, 0,0,0);
dat(309, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20,-1, 1, 0,0,0, 0,0,0);
dat(310, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 1,-1, 0,0,0, 0,0,0);
dat(311,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4, 0, 20, 1,-1, 0,0,0);
dat(312,-1, 1,-1, -2, 2,-1,  1,-1, 1,  2,-2, 1,  3,-3, 0, 20, -1,1, 0,0,0);
dat(313,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4, 0, 20, 1,-1, 0,0,0);
dat(314,-1, 1,-1,  1,-1,-1,  2,-2, 1,  3,-3, 1,  4,-4, 0, 20,-1, 1, 0,0,0);
dat(315, 1,-1, 1,  2,-2, 0, -1, 1, 1, -2, 2,-1, -3, 3,-1, 20,-2, 2, 0,0,0);
dat(316, 1,-1, 1,  2,-2, 0, -1, 1, 1, -2, 2,-1, -3, 3,-1, 20,-3, 3, 0,0,0);
dat(317,-1, 1,-1, -2, 2, 1, -3, 3,-1,  1,-1, 1,  2,-2, 0, 20,-1, 1, 0,0,0);
dat(318,-1, 1,-1, -2, 2, 1, -3, 3,-1,  1,-1, 1,  2,-2, 0, 20,-3, 3, 0,0,0);
dat(319,-1, 1, 1, -2, 2,-1,  1,-1,-1,  2,-2, 1,  3,-3, 0, 20, 1,-1, 0,0,0);
dat(320,-1, 1, 1, -2, 2,-1,  1,-1,-1,  2,-2, 1,  3,-3, 0, 20,-2, 2, 0,0,0);
dat(321, 1,-1,-1,  2,-2,-1, -1, 1, 1, -2, 2, 1, -3, 3, 0, 20, 1,-1, 0,0,0);
dat(322, 1,-1,-1,  2,-2,-1, -1, 1, 1, -2, 2, 1, -3, 3, 0, 20, 2,-2, 0,0,0);
dat(323, 1,-1,-1, -1, 1,-1, -2, 2, 1, -3, 3, 1, -4, 4, 0, 20,-1, 1, 0,0,0);
dat(324, 1,-1,-1,  2,-2,-1, -1, 1, 1, -2, 2, 1, -3, 3, 0, 20, 2,-2, 0,0,0);
dat(325, 1,-1, 1,  2,-2,-1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 2,-2, 0,0,0);
dat(326, 1,-1, 1,  2,-2,-1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 3,-3, 0,0,0);
dat(327, 1,-1,-1,  2,-2, 1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 1,-1, 0,0,0);
dat(328, 1,-1,-1,  2,-2, 1,  3,-3,-1, -1, 1, 1, -2, 2, 0, 20, 3,-3, 0,0,0);
dat(329, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3, 0, 20,-1, 1, 0,0,0);
dat(330, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3, 0, 20, 2,-2, 0,0,0);
dat(331, 1,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);

dat(332,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(333,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(334,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(335,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(336,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(337,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(338,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(339,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
dat(340,  100,-1, 1,  2,-2,-1, -1, 1,-1, -2, 2, 1, -3, 3,-1, 20, 2,-2, 0,0,0);
 }
/*_____________________________________________________________________________________*/

initdatAdd
{
dat(341, 0,0,-1,   1,0,-1,  2,0,-1,  -1,0,-1,  -2,0,-1,  20,1,0,  20,-1,0);
dat(342, 0,0,-1,   1,1,-1,  2,2,-1,   -1,-1,-1,-2,-2,-1,20,1,1,20,-1,-1);
dat(343, 0,0,-1,   0,-1,-1, 0,-2,-1,  0,1,-1,  0,2,-1,  20,0,1, 20,0,-1);
dat(344, 0,0,-1,   1,-1,-1, 2,-2,-1,  -1,1,-1,  -2,2,-1, 20,1,-1,20,-1,1);

dat(345, 0,0,-1,   1,0,-1, -1,0,-1, -2,0,-1, -3,0,-1,  20,-1,0, 20,-2,0);
dat(346, 0,0,-1,   0,1,-1, 0,-1,-1, 0,-2,-1, 0,-3,-1,  20,0,-1, 20,0,-2);
dat(347, 0,0,-1,   1,1,-1, -1,-1,-1,-2,-2,-1,-3,-3,-1, 20,-1,-1, 20,-2,-2);
dat(348, 0,0,-1,   1,-1,-1,-1,1,-1,-2,2,-1,-3,3,-1,20,-1,1,20,-2,2);

dat(349, 0,0,-1, -1,0,-1, 1,0,-1, 2,0,-1, 3,0,-1, 20,1,0, 20,2,0);
dat(350, 0,0,-1, 0,-1,-1, 0,1,-1, 0,2,-1, 0,3,-1, 20,0,1, 20,0,2);
dat(351, 0,0,-1, -1,-1,-1,1,1,-1,2,2,-1,3,3,-1,20,1,1,20,2,2);
dat(352, -1,1,-1,1,-1,-1,2,-2,-1,3,-3,-1,0,0,-1,20,1,-1,20,2,-2);

dat(353, -1,0,-1, -2,0,-1, 1,0,-1, 2,0,1, 3,0,0, 20,-1,0, 20,0,1);
dat(354, 0,-1,-1, 0,-2,-1, 0,1,-1, 0,2,1, 0,3,0, 20,0,-1, 20,1,0);
dat(355,-1,-1,-1,-2,-2,-1,1,1,-1,2,2,1,3,3,0,20,-1,-1,20,1,1);
dat(356,-2,2,-1,-1,1,-1,1,-1,-1,2,-2,1,-3,3,0,20,-1,1,20,1,-1);

dat(357,1,0,-1,2,0,-1,-1,0,-1,-2,0,1,-3,0,0,20,1,0,20,-1,0);
dat(358,0,1,-1,0,2,-1,0,-1,-1,0,-2,1,0,-3,0,20,0,1,20,0,-1);
dat(359,1,1,-1,2,2,-1,-1,-1,-1,-2,-2,1,-3,-3,0,20,1,1,20,-1,-1);
dat(360,1,-1,-1,2,-2,-1,-1,1,-1,-2,2,1,-3,3,0,20,-1,1,20,1,-1);

dat(361,-1,0,-1,-2,0,-1,1,0,-1,2,0,-1,3,0,-1,20,-1,0,20,2,0);
dat(362,0,-1,-1,0,-1,-1,0,1,-1,0,2,-1,0,3,-1,20,0,-1,20,0,2);
dat(363,-1,-1,-1,-2,-2,-1,1,1,-1,2,2,-1,3,3,-1,20,2,2,20,-1,-1);
dat(364,-1,1,-1,-2,2,-1,1,-1,-1,2,-2,-1,3,-3,-1,20,2,-2,20,-1,1);

dat(365,1,0,-1,2,0,-1,-1,0,-1,-2,0,-1,-3,0,-1,20,-2,0,20,1,0);
dat(366,0,1,-1,0,2,-1,0,-1,-1,0,-2,-1,0,-3,-1,20,0,-2,20,0,1);
dat(367,1,1,-1,2,2,-1,-1,-1,-1,-2,-2,-1,-3,-3,-1,20,1,1,20,-2,-2);
dat(368,1,-1,-1,2,-2,-1,-1,1,-1,-2,2,-1,-3,3,-1,20,-2,2,20,1,-1);

dat(369,-1,0,-1,1,0,-1,2,0,-1,3,0,1,4,0,0,20,1,0,20,2,0);
dat(370,0,-1,-1,0,1,-1,0,2,-1,0,3,1,0,4,0,20,0,1,20,0,2);
dat(371,-1,-1,-1,1,1,-1,2,2,-1,3,3,1,4,4,0,20,1,1,20,2,2);
dat(372,-1,1,-1,1,-1,-1,2,-2,-1,3,-3,1,4,-4,0,20,1,-1,20,2,-2);

dat(373,1,0,-1,-1,0,-1,-2,0,-1,-3,0,1,-4,0,0,20,-1,0,20,-2,0);
dat(374,0,1,-1,0,-1,-1,0,-2,-1,0,-3,1,0,-4,0,20,0,-1,20,0,-2);
dat(375,1,1,-1,-1,-1,-1,-2,-2,-1,-3,-3,1,-4,-4,0,20,-1,-1,20,-2,-2);
dat(376,1,-1,-1,-1,1,-1,-2,2,-1,-3,3,1,-4,4,0,20,-1,1,20,-2,2);
}






/****************************************/

zhuhe
{
_mode=TOINT(_argv[0])
Precount=0;

  if _mode==1
     {
     for _i=0;_i<15;_i++ 
       {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK 
         EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==WHITE
         EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==6
         EXIST[_i*15+_j]=Nought;
	  }
       }
     }
    else
     {
     for _i=0;_i<15;_i++ 
       {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK 
          EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==WHITE 
          EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==6   
          EXIST[_i*15+_j]=Nought;
	  }
       }
     }
    for _i=0;_i<15;_i++ 
      {
	 for _j=0;_j<15;_j++ 
	   {
	      if EXIST[_i*15+_j]!=Nought  
                  continue;
	   for _k=52;_k<=143;_k++ 
	        {
		  _m=0;
		  while row.x[_k*7+_m]!=20
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m]>14 
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20
		  {
if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=0;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
 Nowlineflag=2;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
 Nowlineflag=3;
		  if  Middle(_i,_j,Nowlineflag)==1   
                       {1;return}
		   }
	       }
              
	  }
     }
	0;return 
}
/*_____________________________________________________________________________________*/

Middle
   {
     
_i=TOINT(_argv[0])
_j=argv[1]
Oldlineflag=TOINT(_argv[2])

 if Precount==Count
 {
 if End(_i,_j,Oldlineflag)==1
 {
  1; return 
 }
 else
 {
 0; return 
 }

 }
   Precount++;
	   for _k=216;_k<=331;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m] 
				_m++;
				else
				break;
			}
		    if row.x[_k*7+_m]==20 
		  {
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0 
 Nowlineflag=0;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
 Nowlineflag=2;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
 Nowlineflag=3;
 if Nowlineflag==Oldlineflag 
        continue
     elseif Middle(row.y[_k*7+_m]+_i,row.c[_k*7+_m]+_j,Nowlineflag)==1 
             {1;return }
           }
	 }
      
       0;return 
}

End
 {

_i=TOINT(_argv[0])
_j=TOINT(_argv[1])
Oldlineflag=TOINT(_argv[2])
	   
	   for _k=52;_k<=143;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14
			 break;
		 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}

		  if row.x[_k*7+_m]==20
		  {
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
 Nowlineflag=2;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
 Nowlineflag=3;
	 if Nowlineflag==Oldlineflag
             continue;
	       else
	      {
		  wisex=_i;
		  wisey=_j;
		   1;return
 
	       }
	  }
  }
  0;return 
}

/*****************************************************/

Gouzhuhe
{
_mode=TOINT(_argv[0])
Precount=0;

  if _mode==1
     {
     for _i=0;_i<15;_i++
       { 
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK
             EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==WHITE
             EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==6
             EXIST[_i*15+_j]=Nought;
	  }
       }
     }
    else
     {
     for _i=0;_i<15;_i++ 
      {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK
            EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==WHITE
            EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==6
            EXIST[_i*15+_j]=Nought;
	  }
       }
     }

    for _i=0;_i<15;_i++ 
       {
	 for _j=0;_j<15;_j++ 
	   {
		if EXIST[_i*15+_j]!=Nought
                      continue;
	   for _k=52;_k<=143;_k++ 
	      {
		  _m=0;
		  while row.x[_k*7+_m]!=20
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0 || _i+row.x[_k*7+_m] >14 || _j+row.y[_k*7+_m] >14 
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20 
		  {
if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0 
 Nowlineflag=1;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
 Nowlineflag=2;
elseif row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
 Nowlineflag=3;
		    if  Goumiddle(_i,_j,Nowlineflag) ==1
                        {   1;return}

		  }
	      }
	  }
      }
	0;return 
}

Goumiddle
   {

_i=TOINT(_argv[0])
_j=TOINT(_argv[1])
Oldlineflag=TOINT(_argv[2])

    
 if Precount==Count
 {
 if Gouend(_i,_j,Oldlineflag)==1 
   { 1;return }
 else
   { 0;return }
 }
   Precount++;
	   for _k=216;_k<=331;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m]>14 ||  _j+row.y[_k*7+_m] >14 
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m] 
				_m++;
				else
				break;
			}
		    if row.x[_k*7+_m]==20 
		  {
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0 
 Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
 Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
 Nowlineflag=2;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
 Nowlineflag=3;
 if Nowlineflag==Oldlineflag
 continue;
 elseif Goumiddle(row.y[_k*7+_m]+_i,row.c[_k*7+_m]+_j,Nowlineflag)==1
   {  1;return}
		  }
       }
       0; return
}

Gouend
 {
_i=TOINT(_argv[0])
_j=TOINT(_argv[1])
Oldlineflag=TOINT(_argv[2])
 
	   for _k=216;_k<=331;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		    if row.x[_k*7+_m]==20
		  {
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]==0 && row.y[_k*7+_m-1]==0
Nowlineflag=1;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]>0
Nowlineflag=2;
 if row.x[_k*7+_m-1]* row.y[_k*7+_m-1]<0
Nowlineflag=3;
 if Nowlineflag==Oldlineflag
continue;
 else
 {
  wisex=_i+row.x[_k*7+_m];
  wisey=_j+row.y[_k*7+_m];
   1;return
  }
	 }
       }
        0;return
 }

AddF
 {
  Precount=0;
     for _i=0;_i<15;_i++ 
     {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK 
          EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==WHITE 
          EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==6
          EXIST[_i*15+_j]=Nought;
	  }
     }
       for _i=0;_i<15;_i++ 
       {
	 for _j=0;_j<15;_j++ 
	   {
	if EXIST[_i*15+_j]!=Nought
           continue;
	   if Mark2[_i*15+_j]>9
	    {
	   for _k=341;_k<=376;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0 || _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14 
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m] 
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20 
		    {
		    if TreeExist(row.y[_k*7+_m]+_i,row.c[_k*7+_m]+_j)  &&TreeExist(row.y[k*7+m+1]+_i,row.c[k*7+m+1]+_j)
		      {
		      wisex=_i;
		      wisey=_j;
		     1; return 
		      }
		     }
		    }
		 }
	      }
            }
		0; return 
	  }

TreeExist
 {
_i=TOINT(_argv[0])
_j=TOINT(_argv[1])
	for Count=0;Count<1;Count++ 
	 {
	  if Middle(_i,_j,-100)==1 
              { 1; return }
	 }
	0; return 
 }


AddJ
 {
  
  Precount=0;
     for _i=0;_i<15;_i++ 
      {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK 
           EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==WHITE
           EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==6
           EXIST[_i*15+_j]=Nought;
	  }
       }
       for _i=0;_i<15;_i++ 
       {
	 for _j=0;_j<15;_j++ 
	   {
if EXIST[_i*15+_j]!=Nought
  continue;
	if Mark1[_i*15+_j]>9 
	      {
	   for _k=341;_k<=376;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20
		    {
		    if TreeExist(row.y[_k*7+_m]+_i,row.c[_k*7+_m]+_j)&&TreeExist(row.y[k*7+m+1]+_i,row.c[k*7+m+1]+_j)
		      {
		      wisex=_i;
		      wisey=_j;
		       1;return
		      }
		    }
		 }
              }
           }
       }
		 0;return 
 }


GouAdd
 {
  

      for _i=0;_i<15;_i++ 
       {
	for _j=0;_j<15;_j++ 
	  {
	if State[_i*15+_j]==BLACK 
            EXIST[_i*15+_j]=White;
	if State[_i*15+_j]==WHITE
            EXIST[_i*15+_j]=Black;
	if State[_i*15+_j]==6
            EXIST[_i*15+_j]=Nought;
	  }
        }
       for _i=0;_i<15;_i++
        { 
	 for _j=0;_j<15;_j++ 
	   {
	if EXIST[_i*15+_j]!=Nought
            continue;
	   for _k=341;_k<=376;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0|| _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14 
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20
		    {
		    if Mark1[(_i+row.y[_k*7+_m])*15+_j+row.y[_k*7+_m]]>=9&& Mark1[(_i+row.y[_k*7+_m+1])*15+_j+row.c[_k*7+_m+1]]>=9
		      {
		      if ExistKeGou(_i,_j)
                        {  1; return}
		      }
		     }
		    }
		 }
            }
		0; return 
   }

ExistKeGou
    {
   
_i=TOINT(_argv[0])
_j=TOINT(_argv[1])
   
	   for _k=216;_k<=331;_k++ 
		 {
		  _m=0;
		  while row.x[_k*7+_m]!=20 
			{
			 if  _i+row.x[_k*7+_m] <0 ||  _j+row.y[_k*7+_m] <0 || _i+row.x[_k*7+_m] >14 ||  _j+row.y[_k*7+_m] >14
			 break;
			 if EXIST[(_i+row.x[_k*7+_m])*15+_j+row.y[_k*7+_m]]==row.c[_k*7+_m]
				_m++;
				else
				break;
			}
		  if row.x[_k*7+_m]==20
		    {
		     wisex=_i+row.x[_k*7+_m];
		     wisey=_j+row.y[_k*7+_m];
		     1;return 
		     }
		  }
		 0; return
    }

